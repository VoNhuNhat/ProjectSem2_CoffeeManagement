package view;

import DAO.AreaImplements;
import DAO.CoffeeTableImplements;
import DAO.OrderDetailImplements;
import Helpers.DialogHelpers;
import data.Area;
import data.CoffeeTable;
import data.OrderDetail;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author omar
 */
public class AreaTable extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    DefaultListModel listModel = new DefaultListModel();
    DefaultComboBoxModel comboxModel = new DefaultComboBoxModel();
    OrderDetailImplements odi = new OrderDetailImplements();
    
    public AreaTable() {
        initComponents();
        this.setLocationRelativeTo(null);// center form in the screen
        loadHeaderImage();
        loadBannerImage();
        loadFooterImage();
        loadMiniBannerImage();
        loadArea();
        
    }
    
    AreaImplements ai = new AreaImplements();
    CoffeeTableImplements ct = new CoffeeTableImplements();
    DialogHelpers dialog;
    help al;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelClose = new javax.swing.JLabel();
        jLabelMin = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btndx = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAreaTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listArea = new javax.swing.JList<>();
        jPanel7 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboxArea = new javax.swing.JComboBox();
        tableName = new javax.swing.JTextField();
        createNewTable = new javax.swing.JButton();
        updateTable = new javax.swing.JButton();
        deleteTable = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        nameArea = new javax.swing.JTextField();
        createNewArea = new javax.swing.JButton();
        updateArea = new javax.swing.JButton();
        deleteArea = new javax.swing.JButton();
        banner = new javax.swing.JLabel();
        miniBanner = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        header = new javax.swing.JLabel();
        footer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));
        jPanel1.setPreferredSize(new java.awt.Dimension(1366, 52));

        jLabelClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose.setText("X");
        jLabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        jLabelMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelMin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMin.setText("-");
        jLabelMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Quản lí khu vực và bàn");

        btndx.setBackground(new java.awt.Color(34, 167, 240));
        btndx.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btndx.setForeground(new java.awt.Color(255, 255, 255));
        btndx.setText("Trở về");
        btndx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btndx, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(456, 456, 456)
                .addComponent(jLabelMin)
                .addGap(18, 18, 18)
                .addComponent(jLabelClose)
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelClose)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btndx)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(250, 250, 250));
        jPanel2.setPreferredSize(new java.awt.Dimension(1366, 716));

        tableAreaTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableAreaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TÊN BÀN", "KHU VỰC BÀN", "TRẠNG THÁI BÀN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAreaTable.getTableHeader().setReorderingAllowed(false);
        tableAreaTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAreaTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableAreaTable);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Ghi Chú!");

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("* Mỗi khu vực tối đa để được 10 bàn");

        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("* Tên bàn không được trùng tên nhau");

        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("* Tên khu vực không được trùng tên nhau");

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("* Bàn đang có khách hàng sẽ không thể xóa được");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "KHU VỰC ĐẶT BÀN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        listArea.setBackground(java.awt.Color.lightGray);
        listArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        listArea.setForeground(new java.awt.Color(255, 51, 51));
        listArea.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        listArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setText("Khu Vực:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Bàn:");

        comboxArea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboxArea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tableName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        createNewTable.setBackground(new java.awt.Color(34, 167, 240));
        createNewTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        createNewTable.setForeground(new java.awt.Color(255, 255, 255));
        createNewTable.setText("Thêm Bàn");
        createNewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewTableActionPerformed(evt);
            }
        });

        updateTable.setBackground(new java.awt.Color(34, 167, 240));
        updateTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateTable.setForeground(new java.awt.Color(255, 255, 255));
        updateTable.setText("Cập nhật bàn");
        updateTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTableActionPerformed(evt);
            }
        });

        deleteTable.setBackground(new java.awt.Color(242, 38, 19));
        deleteTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteTable.setForeground(new java.awt.Color(255, 255, 255));
        deleteTable.setText("Xóa Bàn");
        deleteTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(jLabel26)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboxArea, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(39, 39, 39)
                            .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(createNewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteTable, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateTable, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 36, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(comboxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateTable, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteTable, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setText("Tên Khu Vực:");

        nameArea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameAreaActionPerformed(evt);
            }
        });

        createNewArea.setBackground(new java.awt.Color(34, 167, 240));
        createNewArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        createNewArea.setForeground(new java.awt.Color(255, 255, 255));
        createNewArea.setText("Thêm khu vực");
        createNewArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewAreaActionPerformed(evt);
            }
        });

        updateArea.setBackground(new java.awt.Color(34, 167, 240));
        updateArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateArea.setForeground(new java.awt.Color(255, 255, 255));
        updateArea.setText("Thay đổi tên");
        updateArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAreaActionPerformed(evt);
            }
        });

        deleteArea.setBackground(new java.awt.Color(242, 38, 19));
        deleteArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteArea.setForeground(new java.awt.Color(255, 255, 255));
        deleteArea.setText("Xóa khu vực");
        deleteArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAreaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameArea, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createNewArea)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateArea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteArea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(nameArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateArea, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createNewArea, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteArea, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        reset.setBackground(new java.awt.Color(34, 167, 240));
        reset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reset.setForeground(new java.awt.Color(255, 255, 255));
        reset.setText("Làm mới");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(miniBanner, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addComponent(banner, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(miniBanner, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addComponent(banner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        header.setText("jLabel10");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 1373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1368, Short.MAX_VALUE)
            .addComponent(footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1368, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footer, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadArea() {
        listModel.removeAllElements();
        List<Area> allAreas = ai.getAllAreas();
        comboxModel.removeAllElements();
        for (Area a : allAreas) {
            listModel.addElement(a.getAreaName());
            comboxModel.addElement(a);
        }
        listArea.setModel(listModel);
        comboxArea.setModel(comboxModel);
        
    }
    
    public void loadTable(int areaId) {
        DefaultTableModel tableModel = (DefaultTableModel) tableAreaTable.getModel();
        tableModel.setRowCount(0);
        List<CoffeeTable> allCoffeeTables = ct.getAllCoffeeTables(areaId);
        for (CoffeeTable a : allCoffeeTables) {
            Object[] data = {a.getTableName(), a.getAreaId().getAreaName(), (a.getStatus() == 0) ? "Bàn trống" : (a.getStatus() == 1) ? "Bàn đang có khách" : "Bàn được khách đặt trước"};
            tableModel.addRow(data);
        }
        tableAreaTable.setModel(tableModel);
    }
    
    public void loadHeaderImage() {
        try {
            BufferedImage img = ImageIO.read(new File("logos", "header.PNG"));
            Image imageScale = img.getScaledInstance(header.getWidth(), header.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(imageScale);
            header.setIcon(imageIcon);
        } catch (IOException ex) {
            Logger.getLogger(AreaTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void loadBannerImage() {
        try {
            BufferedImage img = ImageIO.read(new File("logos", "Untitled-1.png"));
            Image imageScale = img.getScaledInstance(banner.getWidth(), banner.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(imageScale);
            banner.setIcon(imageIcon);
        } catch (IOException ex) {
            Logger.getLogger(AreaTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void loadFooterImage() {
        try {
            BufferedImage img = ImageIO.read(new File("logos", "footer.PNG"));
            Image imageScale = img.getScaledInstance(footer.getWidth(), footer.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(imageScale);
            footer.setIcon(imageIcon);
        } catch (IOException ex) {
            Logger.getLogger(AreaTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void loadMiniBannerImage() {
        try {
            BufferedImage img = ImageIO.read(new File("logos", "Cap.PNG"));
            Image imageScale = img.getScaledInstance(miniBanner.getWidth(), miniBanner.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(imageScale);
            miniBanner.setIcon(imageIcon);
        } catch (IOException ex) {
            Logger.getLogger(AreaTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked
        
        System.exit(0);

    }//GEN-LAST:event_jLabelCloseMouseClicked
    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseClicked
        
        this.setState(JFrame.ICONIFIED);

    }//GEN-LAST:event_jLabelMinMouseClicked

    private void listAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAreaMouseClicked
        createNewArea.setEnabled(false);
        String nameArea = listArea.getSelectedValue();
        if (nameArea != null) {
            this.nameArea.setText(nameArea);
            Area AreaId = ai.findAreaByName(nameArea);
            loadTable(AreaId.getAreaId());
        } else {
            alert("Hãy thêm khu vực");
        }

    }//GEN-LAST:event_listAreaMouseClicked

    private void tableAreaTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAreaTableMouseClicked
        createNewTable.setEnabled(false);
        int index = tableAreaTable.getSelectedRow();
        String nameTable = (String) tableAreaTable.getValueAt(index, 0);
        String nameArea = (String) tableAreaTable.getValueAt(index, 1);
        Area a = new Area();
        a.setAreaName(nameArea);
        comboxArea.setSelectedItem(a);
        tableName.setText(nameTable);
    }//GEN-LAST:event_tableAreaTableMouseClicked

    private void createNewAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewAreaActionPerformed
        String name = nameArea.getText().trim();
        if (name.length() == 0) {
            alert("Hãy nhập tên khu vực");
        } else {
            Area checkNameArea = ai.findAreaByName(name);
            if (checkNameArea != null) {
                alert("Tên khu vực đã tồn tại");
            } else {
                Area a = new Area(0, name, null, null);
                boolean createNewArea = ai.createNewArea(a);
                if (createNewArea) {
                    alert("Thêm khu vực thành công");
                    clearArea();
                    loadArea();
                } else {
                    alert("Lỗi khi thêm mới khu vực");
                }
            }
        }
    }//GEN-LAST:event_createNewAreaActionPerformed

    private void updateAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAreaActionPerformed
        String oldNameArea = listArea.getSelectedValue();
        String newNameArea = nameArea.getText().trim();
        boolean error = false;
        if (oldNameArea == null) {
            alert("Không thể cập nhật được");
            error = true;
        } else {
            if (newNameArea.length() == 0) {
                alert("Hãy nhập tên khu vực");
                error = true;
            } else {
                List<Area> checkExistArea = ai.checkExistArea(oldNameArea, newNameArea);
                if (!checkExistArea.isEmpty()) {
                    alert("Tên khu vực đã tồn tại");
                    error = true;
                } else {
                    error = false;
                }
            }
        }
        
        if (error == false) {
            Area areaId = ai.findAreaByName(oldNameArea);
            System.out.println(areaId.getAreaId());
            Area a = new Area(areaId.getAreaId(), newNameArea, null, null);
            boolean updateArea = ai.updateArea(a);
            if (updateArea) {
                alert("Cập nhật khu vực thành công");
                clearArea();
                loadArea();
            } else {
                alert("Lỗi khi cập nhật khu vực");
            }
        }
    }//GEN-LAST:event_updateAreaActionPerformed

    private void deleteAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAreaActionPerformed
        String nameArea = listArea.getSelectedValue();
        boolean error = false;
        if (nameArea != null) {
            int confirm = DialogHelpers.confirm(this, "Bạn có chắc chắn xóa khu vực này ?");
            if (confirm == JOptionPane.YES_OPTION) {
                Area findAreaByName = ai.findAreaByName(nameArea);
                List<CoffeeTable> allCoffeeTables = ct.getAllCoffeeTables(findAreaByName.getAreaId());
                if (allCoffeeTables.isEmpty()) {
                    error = false;
                } else {
                    for (CoffeeTable a : allCoffeeTables) {
                        if (a.getStatus() == 1) {
                            error = true;
                            break;
                        }
                    }
                }
                if (error == false) {
                    boolean check = false;
                    for (CoffeeTable a : allCoffeeTables) {
                        List<OrderDetail> orderDetailByTable = odi.getOrderDetailByTable(a.getTableId());
                        if (!orderDetailByTable.isEmpty()) {
                            check = true;
                            break;
                        } else {
                            check = false;
                        }
                    }
                    if (check == false) {
                        boolean deleteArea = ai.deleteArea(findAreaByName.getAreaId(), nameArea);
                        if (deleteArea == true) {
                            alert("Xóa khu vực thành công");
                            clearArea();
                            clearAll();
                            loadArea();
                        } else {
                            alert("Xóa khu vực thành công");
                            clearArea();
                            clearAll();
                            loadArea();
                        }
                    } else {
                        alert("Khu vực chứa bàn có thông tin trong hóa đơn không thể xóa được");
                    }
                    
                } else {
                    alert("Khu vực này đang có bàn chứa khách hàng không thể xóa được");
                }
            }
        } else {
            alert("Không thể xóa được");
        }
    }//GEN-LAST:event_deleteAreaActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) tableAreaTable.getModel();
        tableModel.setRowCount(0);
        clearAll();
        createNewArea.setEnabled(true);
        createNewTable.setEnabled(true);
    }//GEN-LAST:event_resetActionPerformed

    private void deleteTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTableActionPerformed
        int index = tableAreaTable.getSelectedRow();
        String nameArea = null;
        String nameTable = null;
        if (index == 0 || index > 0) {
            nameTable = (String) tableAreaTable.getValueAt(index, 0);
            nameArea = (String) tableAreaTable.getValueAt(index, 1);
        }
        if (nameArea != null) {
            Area findAreaByName = ai.findAreaByName(nameArea);
            CoffeeTable statusTable = ct.findTableCoffeeByName(nameTable, findAreaByName.getAreaId());
            int confirm = dialog.confirm(this, "Bạn chắc chắn muốn xóa bàn này ?");
            if (confirm == JOptionPane.YES_OPTION) {
                if (statusTable.getStatus() != 0) {
                    alert("Không thể xóa bàn đang có khách");
                } else {
                    List<OrderDetail> orderDetailByTable = odi.getOrderDetailByTable(statusTable.getTableId());
                    if (!orderDetailByTable.isEmpty()) {
                        alert("Thông tin bàn chứa trong hóa đơn không thể xóa được");
                    } else {
                        boolean deleteCoffeeTable = ct.deleteCoffeeTable(statusTable.getTableId());
                        if (deleteCoffeeTable) {
                            alert("Xoá bàn thành công");
                            loadTable(findAreaByName.getAreaId());
                            clearTable();
                        } else {
                            alert("Lỗi khi xóa bàn");
                        }
                    }
                }
            }
        } else {
            alert("Không thể xóa được");
        }
    }//GEN-LAST:event_deleteTableActionPerformed

    private void createNewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewTableActionPerformed
        Area area = (Area) comboxArea.getSelectedItem();
        String nameTable = this.tableName.getText().trim();
        if (area == null) {
            alert("Hãy thêm tên khu vực trước khi thêm bàn");
        } else {
            if (nameTable.length() == 0) {
                alert("Hãy nhập tên bàn");
            } else {
                int quantity = ct.getQuantityCoffeeTableInArea(area.getAreaId());
                if (quantity == 10) {
                    alert("Khu vực này đã đạt đến số lượng bàn tối đa");
                } else {
                    CoffeeTable checkNameTable = ct.findTableCoffeeByName(nameTable, area.getAreaId());
                    if (checkNameTable != null) {
                        alert("Tên bàn đã tồn tại");
                    } else {
                        CoffeeTable ctData = new CoffeeTable(0, nameTable, area, 0, null, null);
                        boolean createNewCoffeeTable = ct.createNewCoffeeTable(ctData);
                        if (createNewCoffeeTable) {
                            alert("Thêm bàn thành công");
                            loadTable(area.getAreaId());
                            clearTable();
                        } else {
                            alert("Lỗi khi thêm bàn");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_createNewTableActionPerformed

    private void updateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTableActionPerformed
        int index = tableAreaTable.getSelectedRow();
        String oldNameTable = null;
        String nameArea = null;
        boolean error = false;
        if (index > 0 || index == 0) {
            oldNameTable = (String) tableAreaTable.getValueAt(index, 0);
            nameArea = (String) tableAreaTable.getValueAt(index, 1);
        }
        String newNameTable = tableName.getText().trim();
        if (oldNameTable != null) {
            Area findAreaByName = ai.findAreaByName(nameArea);
            Area area = (Area) comboxArea.getSelectedItem();
            String nameTable = this.tableName.getText().trim();
            if (nameTable.length() == 0) {
                alert("Hãy nhập tên bàn");
                error = true;
            } else {
                if (!area.getAreaName().equals(nameArea)) {
                    int quantity = ct.getQuantityCoffeeTableInArea(area.getAreaId());
                    if (quantity == 10) {
                        alert("Khu vực " + area.getAreaName() + " đã đạt đến số lượng bàn tối đa");
                        error = true;
                    } else {
                        List<CoffeeTable> checkExistCoffeeTableInArea = ct.checkExistCoffeeTableInArea(newNameTable, findAreaByName.getAreaId());
                        if (!checkExistCoffeeTableInArea.isEmpty()) {
                            alert("Tên bàn đã tồn tại trong khu vực " + area.getAreaName());
                            error = true;
                        } else {
                            error = false;
                        }
                    }
                } else {
                    List<CoffeeTable> checkExistCoffeeTable = ct.checkExistCoffeeTable(oldNameTable, newNameTable, findAreaByName.getAreaId());
                    if (!checkExistCoffeeTable.isEmpty()) {
                        alert("Tên bàn đã tồn tại trong khu vực này");
                        error = true;
                    } else {
                        error = false;
                    }
                }
                
                if (error == false) {
                    CoffeeTable tableId = ct.findTableCoffeeByName(oldNameTable, findAreaByName.getAreaId());
                    CoffeeTable ctData = new CoffeeTable(tableId.getTableId(), nameTable, area, 0, null, null);
                    boolean updateCoffeeTable = ct.updateCoffeeTable(ctData);
                    if (updateCoffeeTable) {
                        alert("Cập nhật bàn thành công");
                        loadTable(area.getAreaId());
                        clearTable();
                    } else {
                        alert("Lỗi khi cập nhật bàn");
                    }
                }
            }
        } else {
            alert("Không thể cập nhật");
        }

    }//GEN-LAST:event_updateTableActionPerformed

    private void btndxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndxActionPerformed
        MainJFrame mj = new MainJFrame();
        mj.setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btndxActionPerformed

    private void nameAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameAreaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AreaTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AreaTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AreaTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AreaTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AreaTable().setVisible(true);
            }
        });
    }
    
    private void alert(String message) {
        al = new help(message);
        al.setVisible(true);
    }
    
    public void clearArea() {
        nameArea.setText("");
        createNewArea.setEnabled(true);
    }
    
    public void clearTable() {
        tableName.setText("");
        int indexComboxArea = comboxArea.getSelectedIndex();
        comboxArea.setSelectedIndex(indexComboxArea);
        createNewTable.setEnabled(true);
    }
    
    public void clearAll() {
        DefaultTableModel tableModel = (DefaultTableModel) tableAreaTable.getModel();
        tableModel.setRowCount(0);
        clearArea();
        clearTable();
        loadArea();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel banner;
    private javax.swing.JButton btndx;
    private javax.swing.JComboBox comboxArea;
    private javax.swing.JButton createNewArea;
    private javax.swing.JButton createNewTable;
    private javax.swing.JButton deleteArea;
    private javax.swing.JButton deleteTable;
    private javax.swing.JLabel footer;
    private javax.swing.JLabel header;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listArea;
    private javax.swing.JLabel miniBanner;
    private javax.swing.JTextField nameArea;
    private javax.swing.JButton reset;
    private javax.swing.JTable tableAreaTable;
    private javax.swing.JTextField tableName;
    private javax.swing.JButton updateArea;
    private javax.swing.JButton updateTable;
    // End of variables declaration//GEN-END:variables
}
