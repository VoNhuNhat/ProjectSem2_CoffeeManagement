package view;

import DAO.OrderCoffeeImplements;
import DAO.TableProductImplements;
import data.OrderCoffee;
import data.TableProduct;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author omar
 */
public class StatisticJFrame extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    help al;
    helpStatistic alStatistic;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    NumberFormat formatNumber = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
    DefaultComboBoxModel modelComboxOrderToday = new DefaultComboBoxModel();
    DefaultComboBoxModel modelComboxOrderSearch = new DefaultComboBoxModel();
    TableProductImplements tpi = new TableProductImplements();
    OrderCoffeeImplements oci = new OrderCoffeeImplements();

    public StatisticJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);// center form in the screen
        loadOrderToday();
    }

    public void loadOrderToday() {
        comboxOrderFilter.removeAllItems();
        DefaultTableModel modelTable = (DefaultTableModel) viewOrderCoffeeToday.getModel();
        modelTable.setRowCount(0);
        Date date = new Date();
        List<OrderCoffee> orderCoffeeByDate = oci.getOrderCoffeeByDate(date, 1);
        double moneyToday = 0;
        if (!orderCoffeeByDate.isEmpty()) {
            for (OrderCoffee oc : orderCoffeeByDate) {
                moneyToday += oc.getTotalMoney();
                String formatTotalMoney = formatNumber.format(oc.getTotalMoney());
                Object[] data = {
                    oc.getOrderId(),
                    oc.getUserId().getFullname(),
                    oc.getUserCashier().getFullname(),
                    (oc.getCusId() != null) ? oc.getCusId().getFullname() : "",
                    formatTotalMoney
                };
                modelTable.addRow(data);
            }
            viewOrderCoffeeToday.setModel(modelTable);
        } else {
            viewOrderCoffeeToday.removeAll();
        }

        int rowCount = viewOrderCoffeeToday.getRowCount();
        String rowCountString = String.valueOf(rowCount);
        totalOrderToday.setText(rowCountString);
        String formatMoneyToday = formatNumber.format(moneyToday);
        totalMoneyToday.setText(formatMoneyToday);

        modelComboxOrderToday.removeAllElements();
        for (int i = 0; i < viewOrderCoffeeToday.getRowCount(); i++) {
            int oc = (int) viewOrderCoffeeToday.getValueAt(i, 0);
            modelComboxOrderToday.addElement(oc);
        }
        comboxOrderToday.setModel(modelComboxOrderToday);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelClose = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btndx = new javax.swing.JButton();
        jLabelMin = new javax.swing.JLabel();
        Chart = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filterOrder = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewOrderCoffeeFilter = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        viewDetailOrderFilter = new javax.swing.JButton();
        comboxOrderFilter = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        totalOrderFilter = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        totalMoneyOrderFilter = new javax.swing.JTextField();
        endDate = new com.toedter.calendar.JDateChooser();
        startDate = new com.toedter.calendar.JDateChooser();
        txtSearchOrder = new javax.swing.JTextField();
        searchOrderFilter = new javax.swing.JButton();
        lblFilterOrder = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewOrderCoffeeToday = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalOrderToday = new javax.swing.JTextField();
        totalMoneyToday = new javax.swing.JTextField();
        lblOrderToday = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        viewOrderToday = new javax.swing.JButton();
        comboxOrderToday = new javax.swing.JComboBox();
        searchOrderToday = new javax.swing.JButton();
        txtSearchOrderToday = new javax.swing.JTextField();
        chartMonthAYear = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        viewOrderDetail = new javax.swing.JTable();
        lblInforOrder = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel2.setPreferredSize(new java.awt.Dimension(1368, 780));

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));

        jLabelClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose.setText("X");
        jLabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Thống kê");

        btndx.setBackground(new java.awt.Color(34, 167, 240));
        btndx.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btndx.setForeground(new java.awt.Color(255, 255, 255));
        btndx.setText("Trở về");
        btndx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndxActionPerformed(evt);
            }
        });

        jLabelMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelMin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMin.setText("-");
        jLabelMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btndx, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(558, 558, 558)
                .addComponent(jLabelMin)
                .addGap(18, 18, 18)
                .addComponent(jLabelClose)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelMin))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(btndx))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Từ Ngày:");

        filterOrder.setBackground(new java.awt.Color(34, 167, 240));
        filterOrder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        filterOrder.setForeground(new java.awt.Color(255, 255, 255));
        filterOrder.setText("Lọc");
        filterOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterOrderActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Đến ngày:");

        viewOrderCoffeeFilter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewOrderCoffeeFilter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ HĐ", "PHỤC VỤ", "THU NGÂN", "KHÁCH HÀNG", "TỔNG TIỀN", "THANH TOÁN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewOrderCoffeeFilter.setEnabled(false);
        viewOrderCoffeeFilter.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(viewOrderCoffeeFilter);
        if (viewOrderCoffeeFilter.getColumnModel().getColumnCount() > 0) {
            viewOrderCoffeeFilter.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        jLabel12.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel12.setText("Xem chi tiết hóa đơn:");

        viewDetailOrderFilter.setBackground(new java.awt.Color(34, 167, 240));
        viewDetailOrderFilter.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewDetailOrderFilter.setForeground(new java.awt.Color(255, 255, 255));
        viewDetailOrderFilter.setText("Xem");
        viewDetailOrderFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailOrderFilterActionPerformed(evt);
            }
        });

        comboxOrderFilter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboxOrderFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel14.setText("Tổng số hóa đơn bán ra:");

        totalOrderFilter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalOrderFilter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalOrderFilter.setDisabledTextColor(java.awt.Color.black);
        totalOrderFilter.setEnabled(false);

        jLabel16.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel16.setText("Tổng tiền các hóa đơn:");

        totalMoneyOrderFilter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalMoneyOrderFilter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalMoneyOrderFilter.setDisabledTextColor(java.awt.Color.black);
        totalMoneyOrderFilter.setEnabled(false);

        endDate.setDateFormatString("dd/MM/yyyy");
        endDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        startDate.setDateFormatString("dd/MM/yyyy");
        startDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchOrder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchOrderActionPerformed(evt);
            }
        });
        txtSearchOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchOrderKeyPressed(evt);
            }
        });

        searchOrderFilter.setBackground(new java.awt.Color(34, 167, 240));
        searchOrderFilter.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchOrderFilter.setForeground(new java.awt.Color(255, 255, 255));
        searchOrderFilter.setText("Tìm kiếm");
        searchOrderFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOrderFilterActionPerformed(evt);
            }
        });

        lblFilterOrder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFilterOrder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFilterOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboxOrderFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(totalOrderFilter)
                            .addComponent(viewDetailOrderFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtSearchOrder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchOrderFilter))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalMoneyOrderFilter)))))
                .addGap(6, 6, 6))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFilterOrder)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalOrderFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalMoneyOrderFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchOrderFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboxOrderFilter)
                            .addComponent(viewDetailOrderFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("THÔNG TIN HÓA ĐƠN HÔM NAY");

        viewOrderCoffeeToday.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewOrderCoffeeToday.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ HĐ", "PHỤC VỤ", "THU NGÂN", "KHÁCH HÀNG", "TỔNG TIỀN"
            }
        ));
        viewOrderCoffeeToday.setEnabled(false);
        viewOrderCoffeeToday.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(viewOrderCoffeeToday);
        if (viewOrderCoffeeToday.getColumnModel().getColumnCount() > 0) {
            viewOrderCoffeeToday.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel7.setText("Tổng số hóa đơn ngày hôm nay:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel8.setText("Tổng tiền hóa đơn hôm nay:");

        totalOrderToday.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalOrderToday.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalOrderToday.setDisabledTextColor(java.awt.Color.black);
        totalOrderToday.setEnabled(false);

        totalMoneyToday.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalMoneyToday.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalMoneyToday.setDisabledTextColor(java.awt.Color.black);
        totalMoneyToday.setEnabled(false);

        lblOrderToday.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblOrderToday.setText("THÔNG TIN HÓA ĐƠN");

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel9.setText("Xem chi tiết hóa đơn:");

        viewOrderToday.setBackground(new java.awt.Color(34, 167, 240));
        viewOrderToday.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewOrderToday.setForeground(new java.awt.Color(255, 255, 255));
        viewOrderToday.setText("Xem");
        viewOrderToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderTodayActionPerformed(evt);
            }
        });

        comboxOrderToday.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboxOrderToday.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchOrderToday.setBackground(new java.awt.Color(34, 167, 240));
        searchOrderToday.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchOrderToday.setForeground(new java.awt.Color(255, 255, 255));
        searchOrderToday.setText("Tìm kiếm");
        searchOrderToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOrderTodayActionPerformed(evt);
            }
        });

        txtSearchOrderToday.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchOrderToday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchOrderTodayKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(comboxOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalMoneyToday, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(txtSearchOrderToday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchOrderToday)))
                .addGap(6, 6, 6))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(jLabel11))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(lblOrderToday)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblOrderToday)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(totalOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalMoneyToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboxOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchOrderToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap())
        );

        chartMonthAYear.setBackground(new java.awt.Color(34, 167, 240));
        chartMonthAYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chartMonthAYear.setForeground(new java.awt.Color(255, 255, 255));
        chartMonthAYear.setText("BIỂU ĐỒ THỐNG KÊ DOANH THU (THÁNG)");
        chartMonthAYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartMonthAYearActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        viewOrderDetail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SẢN PHẨM ĐƯỢC ĐẶT", "GIÁ TIỀN", "SỐ LƯỢNG ĐẶT", "THÀNH TIỀN", "BÀN - KHU VỰC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewOrderDetail.setEnabled(false);
        viewOrderDetail.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(viewOrderDetail);

        lblInforOrder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblInforOrder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInforOrder.setText("THÔNG TIN HÓA ĐƠN CHI TIẾT ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addComponent(lblInforOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInforOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
        );

        refresh.setBackground(new java.awt.Color(34, 167, 240));
        refresh.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        refresh.setForeground(new java.awt.Color(255, 255, 255));
        refresh.setText("Làm mới");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChartLayout = new javax.swing.GroupLayout(Chart);
        Chart.setLayout(ChartLayout);
        ChartLayout.setHorizontalGroup(
            ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChartLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChartLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chartMonthAYear, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(361, 361, 361)
                        .addComponent(refresh)
                        .addGap(28, 28, 28))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        ChartLayout.setVerticalGroup(
            ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChartLayout.createSequentialGroup()
                .addGroup(ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chartMonthAYear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ChartLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabelCloseMouseClicked

    private void filterOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterOrderActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
        modelTableSearch.setRowCount(0);
        Date start = startDate.getDate();
        Date end = endDate.getDate();
        double moneySearch = 0;
        if (start != null) {
            String stringStart = sdf.format(start);
            if (end != null) {
                String stringEnd = sdf.format(end);
                if (stringStart.equals(stringEnd)) {
                    List<OrderCoffee> orderCoffeeByDate = oci.getOrderCoffeeByDate(start, 1);
                    if (!orderCoffeeByDate.isEmpty()) {
                        forOrderSearch(orderCoffeeByDate, moneySearch);
                        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN NGÀY " + stringStart);
                    } else {
                        alert("Không tìm thấy hóa đơn nào vào ngày " + stringStart);
                        resetOrderFilter();
                    }
                } else if (start.before(end) && end.after(start)) {
                    List<OrderCoffee> orderBetweenDate = oci.getOrderCoffeeBetweenDate(start, end, 1);
                    if (!orderBetweenDate.isEmpty()) {
                        forOrderSearch(orderBetweenDate, moneySearch);
                        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN TỪ " + stringStart + " ĐẾN " + stringEnd);
                    } else {
                        alert("Không tìm thấy hóa đơn nào từ " + stringStart + " đến " + stringEnd);
                        resetOrderFilter();
                    }
                } else {
                    alert("Ngày kết thúc phải lớn hơn ngày bắt đầu");
                    resetOrderFilter();
                }

            } else {
                List<OrderCoffee> orderCoffeeByDate = oci.getOrderCoffeeByDate(start, 1);
                if (!orderCoffeeByDate.isEmpty()) {
                    forOrderSearch(orderCoffeeByDate, moneySearch);
                    lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN NGÀY " + stringStart);
                } else {
                    alert("Không tìm thấy hóa đơn nào vào ngày " + stringStart);
                    resetOrderFilter();
                }
            }
        } else {
            alert("Hãy chọn ngày bắt đầu");
        }
    }//GEN-LAST:event_filterOrderActionPerformed
    public void resetOrderFilter() {
        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
        totalOrderFilter.setText("");
        totalMoneyOrderFilter.setText("");
        comboxOrderFilter.removeAllItems();
    }

    public void resetOrderToday() {
        lblOrderToday.setText("THÔNG TIN HÓA ĐƠN");
        totalOrderToday.setText("");
        totalMoneyToday.setText("");
        comboxOrderToday.removeAllItems();
    }

    public void forOrderSearch(List<OrderCoffee> orderCoffeeByDate, double moneySearch) {
        DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
        SimpleDateFormat formatDateTable = new SimpleDateFormat("dd/MM/yyyy");
        for (OrderCoffee oc : orderCoffeeByDate) {
            moneySearch += oc.getTotalMoney();
            String formatTotalMoney = formatNumber.format(oc.getTotalMoney());
            String formatCreatedDate = formatDateTable.format(oc.getCreatedDate());
            Object[] data = {
                oc.getOrderId(),
                oc.getUserId().getFullname(),
                oc.getUserCashier().getFullname(),
                (oc.getCusId() != null) ? oc.getCusId().getFullname() : "",
                formatTotalMoney,
                formatCreatedDate
            };
            modelTableSearch.addRow(data);
        }
        viewOrderCoffeeFilter.setModel(modelTableSearch);
        int rowCountSearchOrder = viewOrderCoffeeFilter.getRowCount();
        totalOrderFilter.setText(String.valueOf(rowCountSearchOrder));
        String formatMoneySearch = formatNumber.format(moneySearch);
        totalMoneyOrderFilter.setText(formatMoneySearch);

        modelComboxOrderSearch.removeAllElements();
        for (int i = 0; i < viewOrderCoffeeFilter.getRowCount(); i++) {
            int oc = (int) viewOrderCoffeeFilter.getValueAt(i, 0);
            modelComboxOrderSearch.addElement(oc);
        }
        comboxOrderFilter.setModel(modelComboxOrderSearch);
    }

    public void forOrderToday(List<OrderCoffee> orderCoffeeByDate, double moneySearch) {
        DefaultTableModel modelTableToday = (DefaultTableModel) viewOrderCoffeeToday.getModel();
        SimpleDateFormat formatDateTable = new SimpleDateFormat("dd/MM/yyyy");
        for (OrderCoffee oc : orderCoffeeByDate) {
            moneySearch += oc.getTotalMoney();
            String formatTotalMoney = formatNumber.format(oc.getTotalMoney());
            String formatCreatedDate = formatDateTable.format(oc.getCreatedDate());
            Object[] data = {
                oc.getOrderId(),
                oc.getUserId().getFullname(),
                oc.getUserCashier().getFullname(),
                (oc.getCusId() != null) ? oc.getCusId().getFullname() : "",
                formatTotalMoney,
                formatCreatedDate
            };
            modelTableToday.addRow(data);
        }
        viewOrderCoffeeToday.setModel(modelTableToday);
        int rowCountSearchOrder = viewOrderCoffeeToday.getRowCount();
        totalOrderToday.setText(String.valueOf(rowCountSearchOrder));
        String formatMoneySearch = formatNumber.format(moneySearch);
        totalMoneyToday.setText(formatMoneySearch);

        modelComboxOrderToday.removeAllElements();
        for (int i = 0; i < viewOrderCoffeeToday.getRowCount(); i++) {
            int oc = (int) viewOrderCoffeeToday.getValueAt(i, 0);
            modelComboxOrderToday.addElement(oc);
        }
        comboxOrderToday.setModel(modelComboxOrderToday);
    }

    private void chartMonthAYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartMonthAYearActionPerformed
        Date date = new Date();
        Calendar now = Calendar.getInstance();
        int currentYear = now.get(Calendar.YEAR);
        DefaultCategoryDataset dcd = new DefaultCategoryDataset();
        for (int i = 1; i < 13; i++) {
            Double money = oci.getSumTotalMoneyOrderByMonthAndYear(i, currentYear, 1);
            dcd.setValue(money, "Doanh thu", "tháng " + i);
        }

        JFreeChart jchart = ChartFactory.createBarChart("Biểu đồ doanh thu theo tháng năm " + currentYear, "Ghi chú", "Doanh thu (VNĐ)", dcd, PlotOrientation.VERTICAL, true, true, false);
        CategoryPlot cp = jchart.getCategoryPlot();
        cp.setRangeGridlinePaint(Color.black);

        ChartFrame cf = new ChartFrame("Biểu đồ doanh thu bán hàng năm " + currentYear, jchart, true);
        cf.setVisible(true);
        cf.setSize(500, 400);
        cf.setSize(1370, 750);
        cf.setLocationRelativeTo(null);

    }//GEN-LAST:event_chartMonthAYearActionPerformed

    private void viewOrderTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderTodayActionPerformed
        DefaultTableModel modelOrderDetail = (DefaultTableModel) viewOrderDetail.getModel();
        modelOrderDetail.setRowCount(0);
        if (comboxOrderToday.getItemCount() != 0) {
            int selectedItem = (int) comboxOrderToday.getSelectedItem();
            List<TableProduct> tableProductByOrderId = tpi.getTableProductByOrderId(selectedItem);
            for (TableProduct tp : tableProductByOrderId) {
                String priceFormat = formatNumber.format(tp.getProId().getPrice());
                String formatTotalMoneyPerRow = formatNumber.format((tp.getProId().getPrice() * tp.getQuantityOrder()));
                Object[] data = {
                    tp.getProId().getProName(),
                    priceFormat,
                    tp.getQuantityOrder(),
                    formatTotalMoneyPerRow,
                    tp.getTableId().getTableName() + " - " + tp.getTableId().getAreaId().getAreaName()
                };
                modelOrderDetail.addRow(data);
            }
            viewOrderDetail.setModel(modelOrderDetail);
            lblInforOrder.setText("THÔNG TIN CHI TIẾT HÓA ĐƠN MÃ " + selectedItem);
        } else {
            alert("Chưa có mã hóa đơn");
        }
    }//GEN-LAST:event_viewOrderTodayActionPerformed

    private void viewDetailOrderFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailOrderFilterActionPerformed
        DefaultTableModel modelOrderDetail = (DefaultTableModel) viewOrderDetail.getModel();
        modelOrderDetail.setRowCount(0);
        if (comboxOrderFilter.getItemCount() != 0) {
            int selectedItem = (int) comboxOrderFilter.getSelectedItem();
            List<TableProduct> tableProductByOrderId = tpi.getTableProductByOrderId(selectedItem);
            for (TableProduct tp : tableProductByOrderId) {
                String priceFormat = formatNumber.format(tp.getProId().getPrice());
                String formatTotalMoneyPerRow = formatNumber.format((tp.getProId().getPrice() * tp.getQuantityOrder()));
                Object[] data = {
                    tp.getProId().getProName(),
                    priceFormat,
                    tp.getQuantityOrder(),
                    formatTotalMoneyPerRow,
                    tp.getTableId().getTableName() + " - " + tp.getTableId().getAreaId().getAreaName()
                };
                modelOrderDetail.addRow(data);
            }
            viewOrderDetail.setModel(modelOrderDetail);
            lblInforOrder.setText("THÔNG TIN CHI TIẾT HÓA ĐƠN MÃ " + selectedItem);
        } else {
            alert("Chưa có mã hóa đơn");
        }
    }//GEN-LAST:event_viewDetailOrderFilterActionPerformed

    private void btndxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndxActionPerformed
        MainJFrame mj = new MainJFrame();
        mj.setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btndxActionPerformed

    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseClicked

        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelMinMouseClicked
    public void searchOrderToday() {
        String textSearch = txtSearchOrderToday.getText().trim();
        Date date = new Date();
        List<OrderCoffee> searchOrderCoffeeByUserAccount = oci.searchOrderCoffeeByUserAccountDate(textSearch, date, 1);
        DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeToday.getModel();
        modelTableSearch.setRowCount(0);
        double moneySearch = 0;
        if (!searchOrderCoffeeByUserAccount.isEmpty()) {
            forOrderToday(searchOrderCoffeeByUserAccount, moneySearch);
            lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
        } else {
            List<OrderCoffee> searchOrderCoffeeByCustomer = oci.searchOrderCoffeeByCustomerDate(textSearch, date, 1);
            if (!searchOrderCoffeeByCustomer.isEmpty()) {
                forOrderToday(searchOrderCoffeeByCustomer, moneySearch);
                lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
            } else {
                alert("Không tìm thấy hóa đơn nào");
                resetOrderToday();
            }
        }
    }
    private void searchOrderTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOrderTodayActionPerformed
        searchOrderToday();
    }//GEN-LAST:event_searchOrderTodayActionPerformed
    public void searchOrderFilter() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String textSearch = txtSearchOrder.getText().trim();
        Date start = startDate.getDate();
        Date end = endDate.getDate();
        if (textSearch.length() > 0) {
            if (start != null) {
                String startString = sdf.format(start);
                if (end != null) {
                    String endString = sdf.format(end);
                    if (startString.equals(endString)) {
                        List<OrderCoffee> searchOrderCoffeeByUserAccount = oci.searchOrderCoffeeByUserAccountDate(textSearch, start, 1);
                        DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
                        modelTableSearch.setRowCount(0);
                        double moneySearch = 0;
                        if (!searchOrderCoffeeByUserAccount.isEmpty()) {
                            forOrderSearch(searchOrderCoffeeByUserAccount, moneySearch);
                            lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN NGÀY " + startString);
                        } else {
                            List<OrderCoffee> searchOrderCoffeeByCustomer = oci.searchOrderCoffeeByCustomerDate(textSearch, start, 1);
                            if (!searchOrderCoffeeByCustomer.isEmpty()) {
                                forOrderSearch(searchOrderCoffeeByCustomer, moneySearch);
                                lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN NGÀY " + startString);
                            } else {
                                alertStatistic("Không tìm thấy hóa đơn nào vào ngày " + startString + " khớp với từ khóa tìm kiếm: " + textSearch);
                                resetOrderFilter();
                            }
                        }
                    } else if (start.before(end) && end.after(start)) {
                        List<OrderCoffee> searchOrderCoffeeByUserAccount = oci.searchOrderCoffeeByUserAccountBetweenDate(textSearch, start, end, 1);
                        DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
                        modelTableSearch.setRowCount(0);
                        double moneySearch = 0;
                        if (!searchOrderCoffeeByUserAccount.isEmpty()) {
                            forOrderSearch(searchOrderCoffeeByUserAccount, moneySearch);
                            lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN TỪ NGÀY " + startString + " ĐẾN " + endString);
                        } else {
                            List<OrderCoffee> searchOrderCoffeeByCustomer = oci.searchOrderCoffeeByCustomerBetweenDate(textSearch, start, end, 1);
                            if (!searchOrderCoffeeByCustomer.isEmpty()) {
                                forOrderSearch(searchOrderCoffeeByCustomer, moneySearch);
                                lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN TỪ NGÀY " + startString + " ĐẾN " + endString);
                            } else {
                                alertStatistic("Không tìm thấy hóa đơn nào từ " + startString + " đến " + endString + " khớp với từ khóa tìm kiếm: " + textSearch);
                                resetOrderFilter();
                            }
                        }
                    } else {
                        alert("Ngày kết thúc phải lớn hơn ngày bắt đầu");
                    }
                } else {
                    List<OrderCoffee> searchOrderCoffeeByUserAccount = oci.searchOrderCoffeeByUserAccountDate(textSearch, start, 1);
                    DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
                    modelTableSearch.setRowCount(0);
                    double moneySearch = 0;
                    if (!searchOrderCoffeeByUserAccount.isEmpty()) {
                        forOrderSearch(searchOrderCoffeeByUserAccount, moneySearch);
                        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN NGÀY " + startString);
                    } else {
                        List<OrderCoffee> searchOrderCoffeeByCustomer = oci.searchOrderCoffeeByCustomerDate(textSearch, start, 1);
                        if (!searchOrderCoffeeByCustomer.isEmpty()) {
                            forOrderSearch(searchOrderCoffeeByCustomer, moneySearch);
                            lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN NGÀY " + startString);
                        } else {
                            alertStatistic("Không tìm thấy hóa đơn nào vào ngày " + startString + " khớp với từ khóa tìm kiếm: " + textSearch);
                            resetOrderFilter();
                        }
                    }
                }
            } else {
                List<OrderCoffee> searchOrderCoffeeByUserAccount = oci.searchOrderCoffeeByUserAccount(textSearch, 1);
                DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
                modelTableSearch.setRowCount(0);
                double moneySearch = 0;
                if (!searchOrderCoffeeByUserAccount.isEmpty()) {
                    forOrderSearch(searchOrderCoffeeByUserAccount, moneySearch);
                    lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
                } else {
                    List<OrderCoffee> searchOrderCoffeeByCustomer = oci.searchOrderCoffeeByCustomer(textSearch, 1);
                    if (!searchOrderCoffeeByCustomer.isEmpty()) {
                        forOrderSearch(searchOrderCoffeeByCustomer, moneySearch);
                        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
                    } else {
                        alert("Không tìm thấy hóa đơn nào khớp với từ khóa tìm kiếm: " + textSearch);
                        resetOrderFilter();
                    }
                }
            }
        } else {
            List<OrderCoffee> searchOrderCoffeeByUserAccount = oci.searchOrderCoffeeByUserAccount(textSearch, 1);
            DefaultTableModel modelTableSearch = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
            modelTableSearch.setRowCount(0);
            double moneySearch = 0;
            if (!searchOrderCoffeeByUserAccount.isEmpty()) {
                forOrderSearch(searchOrderCoffeeByUserAccount, moneySearch);
                lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
            } else {
                List<OrderCoffee> searchOrderCoffeeByCustomer = oci.searchOrderCoffeeByCustomer(textSearch, 1);
                if (!searchOrderCoffeeByCustomer.isEmpty()) {
                    forOrderSearch(searchOrderCoffeeByCustomer, moneySearch);
                    lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
                } else {
                    alert("Không tìm thấy hóa đơn nào");
                    resetOrderFilter();
                }
            }
        }
    }
    private void searchOrderFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOrderFilterActionPerformed
        searchOrderFilter();
    }//GEN-LAST:event_searchOrderFilterActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        startDate.setDate(null);
        endDate.setDate(null);
        DefaultTableModel modelTableOrderFilter = (DefaultTableModel) viewOrderCoffeeFilter.getModel();
        modelTableOrderFilter.setRowCount(0);
        DefaultTableModel modelTableDetailOrder = (DefaultTableModel) viewOrderDetail.getModel();
        modelTableDetailOrder.setRowCount(0);
        totalOrderFilter.setText("");
        totalMoneyOrderFilter.setText("");
        txtSearchOrder.setText("");
        txtSearchOrderToday.setText("");
        comboxOrderFilter.removeAllItems();
        lblFilterOrder.setText("THÔNG TIN HÓA ĐƠN");
        lblInforOrder.setText("THÔNG TIN CHI TIẾT HÓA ĐƠN");
        loadOrderToday();
    }//GEN-LAST:event_refreshActionPerformed

    private void txtSearchOrderTodayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchOrderTodayKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchOrderToday();
        }
    }//GEN-LAST:event_txtSearchOrderTodayKeyPressed

    private void txtSearchOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchOrderKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchOrderFilter();
        }
    }//GEN-LAST:event_txtSearchOrderKeyPressed

    private void txtSearchOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticJFrame().setVisible(true);
            }
        });
    }

    private void alert(String message) {
        al = new help(message);
        al.setVisible(true);
    }

    private void alertStatistic(String message) {
        alStatistic = new helpStatistic(message);
        alStatistic.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Chart;
    private javax.swing.JButton btndx;
    private javax.swing.JButton chartMonthAYear;
    private javax.swing.JComboBox comboxOrderFilter;
    private javax.swing.JComboBox comboxOrderToday;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JButton filterOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblFilterOrder;
    private javax.swing.JLabel lblInforOrder;
    private javax.swing.JLabel lblOrderToday;
    private javax.swing.JButton refresh;
    private javax.swing.JButton searchOrderFilter;
    private javax.swing.JButton searchOrderToday;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JTextField totalMoneyOrderFilter;
    private javax.swing.JTextField totalMoneyToday;
    private javax.swing.JTextField totalOrderFilter;
    private javax.swing.JTextField totalOrderToday;
    private javax.swing.JTextField txtSearchOrder;
    private javax.swing.JTextField txtSearchOrderToday;
    private javax.swing.JButton viewDetailOrderFilter;
    private javax.swing.JTable viewOrderCoffeeFilter;
    private javax.swing.JTable viewOrderCoffeeToday;
    private javax.swing.JTable viewOrderDetail;
    private javax.swing.JButton viewOrderToday;
    // End of variables declaration//GEN-END:variables
}
