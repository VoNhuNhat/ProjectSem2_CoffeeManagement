package view;

import DAO.AreaImplements;
import DAO.CoffeeTableImplements;
import DAO.CustomerImplements;
import DAO.ProductImplements;
import DAO.TableProductImplements;
import Helpers.DialogHelpers;
import data.Area;
import data.CoffeeTable;
import data.Customer;
import data.Product;
import data.TableProduct;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author omar
 */
public class updateOrderDetailJFrame extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    ProductImplements pi = new ProductImplements();
    TableProductImplements tpi = new TableProductImplements();
    DialogHelpers dialog;
    AreaImplements ai = new AreaImplements();
    CustomerImplements cusi = new CustomerImplements();
    DefaultComboBoxModel<Area> comboxModelArea = new DefaultComboBoxModel();
    DefaultComboBoxModel<CoffeeTable> comboxModelTable = new DefaultComboBoxModel();
    CoffeeTableImplements cti = new CoffeeTableImplements();
    
    public updateOrderDetailJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);// center form in the screen
        loadInformationTable();
    }
    help al;
    POS sell;
    int tableId;
    int productId;
    String nameProduct;
    int quantityOrder;
    int leftQuantityProduct;
    List<CoffeeTable> list = new ArrayList<>();
    String nameTable;
    String nameArea;
    int areaId;
    
    public updateOrderDetailJFrame(POS sell, int tableId, int productId, String nameProduct, int quantityOrder, int leftQuantityProduct, List<CoffeeTable> list, String nameTable, String nameArea, int areaId) {
        initComponents();
        this.setLocationRelativeTo(null);// center form in the screen
        this.sell = sell;
        this.tableId = tableId;
        this.productId = productId;
        this.nameProduct = nameProduct;
        this.quantityOrder = quantityOrder;
        this.leftQuantityProduct = leftQuantityProduct;
        this.list = list;
        this.nameTable = nameTable;
        this.nameArea = nameArea;
        this.areaId = areaId;
        loadInformationTable();
    }
    
    public void loadInformationTable() {
        labelUpdate.setText("Cập nhật sản phẩm " + nameTable + " " + nameArea);
        productName.setText(nameProduct);
        String quantityOrderString = String.valueOf(quantityOrder);
        productQuantity.setText(quantityOrderString);
        productName.setEditable(false);
        String quantityCurrent = productQuantity.getText();
        int quantityCurrentInt = Integer.parseInt(quantityCurrent);
        if (quantityCurrentInt > 1) {
            plus.setEnabled(true);
            substract.setEnabled(true);
        } else {
            substract.setEnabled(false);
        }
        
        List<Area> allAreas = ai.getAllAreas();
        comboxModelArea.removeAllElements();
        for (Area a : allAreas) {
            comboxModelArea.addElement(a);
        }
        comboxArea.setModel(comboxModelArea);
        
        Area a = new Area();
        a.setAreaId(areaId);
        a.setAreaName(nameArea);
        comboxArea.setSelectedItem(a);
        
        Area selectedItem = (Area) comboxArea.getSelectedItem();
        
        List<CoffeeTable> allCoffeeTables = cti.getAllCoffeeTablesByTwoStatus(selectedItem.getAreaId(), 1, 2);
        comboxModelTable.removeAllElements();
        for (CoffeeTable c : allCoffeeTables) {
            Customer customerByTableId = cusi.getCustomerByTableId(c.getTableId(), 0);
            if (c.getStatus() == 2) {
                if (customerByTableId != null && customerByTableId.getStatus() == 1) {
                    comboxModelTable.addElement(c);
                }
            } else {
                comboxModelTable.addElement(c);
            }
        }
        comboxTable.setModel(comboxModelTable);
        for (int i = 0; i < comboxModelTable.getSize(); i++) {
            CoffeeTable table = comboxModelTable.getElementAt(i);
            if (table.getTableId() == tableId) {
                comboxTable.setSelectedIndex(i);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelClose = new javax.swing.JLabel();
        labelUpdate = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        productName = new javax.swing.JTextField();
        substract = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        productQuantity = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        comboxArea = new javax.swing.JComboBox();
        comboxTable = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));

        jLabelClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose.setText("X");
        jLabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        labelUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelUpdate.setForeground(new java.awt.Color(255, 255, 255));
        labelUpdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUpdate.setText("Cập nhật sản phẩm");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelUpdate)
                .addGap(82, 82, 82)
                .addComponent(jLabelClose)
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelClose)
                    .addComponent(labelUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(java.awt.Color.darkGray);
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBackground(java.awt.Color.darkGray);
        jPanel3.setForeground(new java.awt.Color(44, 62, 80));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Tên Sản Phẩm:");

        productName.setBackground(new java.awt.Color(108, 122, 137));
        productName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productName.setForeground(new java.awt.Color(228, 241, 254));

        substract.setBackground(new java.awt.Color(34, 167, 240));
        substract.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        substract.setForeground(new java.awt.Color(255, 255, 255));
        substract.setText("-");
        substract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substractActionPerformed(evt);
            }
        });

        plus.setBackground(new java.awt.Color(34, 167, 240));
        plus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        plus.setForeground(new java.awt.Color(255, 255, 255));
        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("Số lượng:");

        productQuantity.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        productQuantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        productQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productQuantityKeyPressed(evt);
            }
        });

        update.setBackground(new java.awt.Color(34, 167, 240));
        update.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Cập nhật");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(242, 38, 19));
        delete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Xóa Món");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        comboxArea.setBackground(new java.awt.Color(44, 62, 80));
        comboxArea.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        comboxArea.setForeground(new java.awt.Color(255, 255, 255));
        comboxArea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboxArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboxAreaitemchange(evt);
            }
        });
        comboxArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxAreaActionPerformed(evt);
            }
        });

        comboxTable.setBackground(new java.awt.Color(44, 62, 80));
        comboxTable.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        comboxTable.setForeground(new java.awt.Color(255, 255, 255));
        comboxTable.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboxTable.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboxTableitemchange(evt);
            }
        });
        comboxTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboxTableActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Bàn:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Khu vực: ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(substract, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(productQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(plus, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(productName, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(comboxTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboxArea, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3))
                        .addGap(7, 7, 7)))
                .addGap(0, 83, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboxTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(substract, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void close() {
        this.dispose();
    }
    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked
        
        close();
        

    }//GEN-LAST:event_jLabelCloseMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        CoffeeTable tableSelected = (CoffeeTable) comboxTable.getSelectedItem();
        if (tableSelected != null) {
            if (tableSelected.getTableId() == tableId) {
                String proQuantity = productQuantity.getText();
                if ("".equals(proQuantity)) {
                    alert("Hãy nhập số lượng đặt sản phẩm");
                } else {
                    int quantity = Integer.parseInt(proQuantity);
                    if (quantity < 1) {
                        alert("Số lượng đặt phải lớn hơn 0");
                    } else {
                        int result;
                        if (quantity > quantityOrder) {
                            result = quantity - quantityOrder;
                            if (result > leftQuantityProduct) {
                                alert("Không thể cập nhật. Số lượng còn lại: " + leftQuantityProduct);
                            } else {
                                TableProduct findTableProduct = tpi.checkExistTableProduct(productId, tableId, 0);
                                int quantityOrder = findTableProduct.getQuantityOrder();
                                int tblProId = findTableProduct.getTblProId();
                                boolean updatePlusQuantityProduct = pi.updatePlusQuantityProduct(productId, quantityOrder);
                                if (updatePlusQuantityProduct) {
                                    boolean updateQuantityTableProductEmpty = tpi.updateQuantityTableProductEmpty(tblProId);
                                    if (updateQuantityTableProductEmpty) {
                                        boolean updateQuantityTableProductClickTable = tpi.updateQuantityTableProductClickTable(tblProId, quantity);
                                        if (updateQuantityTableProductClickTable) {
                                            boolean updateSubstractQuantityProduct = pi.updateSubstractQuantityProduct(productId, quantity);
                                            if (updateSubstractQuantityProduct) {
                                                sell.loadOrderDetail();
                                                sell.reloadCategoryProduct();
                                                alert("Cập nhật số lượng thành công");
                                                this.dispose();
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            TableProduct findTableProduct = tpi.checkExistTableProduct(productId, tableId, 0);
                            int quantityOrder = findTableProduct.getQuantityOrder();
                            int tblProId = findTableProduct.getTblProId();
                            boolean updatePlusQuantityProduct = pi.updatePlusQuantityProduct(productId, quantityOrder);
                            if (updatePlusQuantityProduct) {
                                boolean updateQuantityTableProductEmpty = tpi.updateQuantityTableProductEmpty(tblProId);
                                if (updateQuantityTableProductEmpty) {
                                    boolean updateQuantityTableProductClickTable = tpi.updateQuantityTableProductClickTable(tblProId, quantity);
                                    if (updateQuantityTableProductClickTable) {
                                        boolean updateSubstractQuantityProduct = pi.updateSubstractQuantityProduct(productId, quantity);
                                        if (updateSubstractQuantityProduct) {
                                            sell.loadOrderDetail();
                                            sell.reloadCategoryProduct();
                                            alert("Cập nhật số lượng thành công");
                                            this.dispose();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                TableProduct findTableProduct = tpi.checkExistTableProduct(productId, tableSelected.getTableId(), 0);
                TableProduct tableProductCurrent = tpi.checkExistTableProduct(productId, tableId, 0);
                String proQuantity = productQuantity.getText();
                int quantity = Integer.parseInt(proQuantity);
                if (findTableProduct != null) {
                    if (quantity > quantityOrder) {
                        alert("Không thể chuyển nhiều hơn sản phẩm được đặt");
                    } else {
                        if (quantity < quantityOrder) {
                            boolean updatePlusQuantityOrderTableProduct = tpi.updatePlusQuantityOrderTableProduct(findTableProduct.getTblProId(), quantity);
                            if (updatePlusQuantityOrderTableProduct) {
                                boolean updateSubstractQuantityOrderTableProduct = tpi.updateSubstractQuantityOrderTableProduct(tableProductCurrent.getTblProId(), quantity);
                                if (updateSubstractQuantityOrderTableProduct) {
                                    sell.loadOrderDetail();
                                    alert("Chuyển sản phẩm thành công");
                                    this.dispose();
                                }
                            }
                        }
                        if (quantity == quantityOrder) {
                            boolean updatePlusQuantityOrderTableProduct = tpi.updatePlusQuantityOrderTableProduct(findTableProduct.getTblProId(), quantity);
                            if (updatePlusQuantityOrderTableProduct) {
                                boolean deleteTableProduct = tpi.deleteTableProduct(tableProductCurrent.getTblProId());
                                if (deleteTableProduct) {
                                    sell.loadOrderDetail();
                                    alert("Chuyển sản phẩm thành công");
                                    this.dispose();
                                }
                            }
                        }
                    }
                } else {
                    if (quantity > quantityOrder) {
                        alert("Không thể chuyển nhiều hơn sản phẩm được đặt");
                    } else {
                        if (quantity < quantityOrder) {
                            CoffeeTable table = cti.getCoffeeTableByTableId(tableSelected.getTableId());
                            Product product = pi.FindProductByProId(productId);
                            TableProduct tp = new TableProduct(0, product, table, quantity, 0, null, null);
                            boolean createNewTableProduct = tpi.createNewTableProductWithQuantity(tp);
                            if (createNewTableProduct) {
                                boolean updateSubstractQuantityOrderTableProduct = tpi.updateSubstractQuantityOrderTableProduct(tableProductCurrent.getTblProId(), quantity);
                                if (updateSubstractQuantityOrderTableProduct) {
                                    sell.loadOrderDetail();
                                    alert("Chuyển sản phẩm thành công");
                                    this.dispose();
                                }
                            }
                        }
                        if (quantity == quantityOrder) {
                            CoffeeTable table = cti.getCoffeeTableByTableId(tableSelected.getTableId());
                            Product product = pi.FindProductByProId(productId);
                            TableProduct tp = new TableProduct(0, product, table, quantity, 0, null, null);
                            boolean createNewTableProduct = tpi.createNewTableProductWithQuantity(tp);
                            if (createNewTableProduct) {
                                boolean deleteTableProduct = tpi.deleteTableProduct(tableProductCurrent.getTblProId());
                                if (deleteTableProduct) {
                                    sell.loadOrderDetail();
                                    alert("Chuyển sản phẩm thành công");
                                    this.dispose();
                                }
                            }
                        }
                    }
                    
                }
            }
        } else {
            alert("Hãy chọn bàn");
        }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        Product findProduct = pi.FindProductByProId(productId);
        int confirm = dialog.confirm(this, "Bạn có chắc muốn xóa sản phẩm " + findProduct.getProName() + " trong hóa đơn không?");
        if (confirm == JOptionPane.YES_OPTION) {
            TableProduct findTableProduct = tpi.checkExistTableProduct(productId, tableId, 0);
            boolean updatePlusQuantityProduct = pi.updatePlusQuantityProduct(productId, quantityOrder);
            if (updatePlusQuantityProduct) {
                boolean updateStatusTableProduct = tpi.deleteTableProduct(findTableProduct.getTblProId());
                if (updateStatusTableProduct) {
                    alert("Xoá sản phẩm trong hóa đơn thành công");
                    sell.loadOrderDetail();
                    sell.reloadCategoryProduct();
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void substractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_substractActionPerformed
        String value = productQuantity.getText();
        if (value.length() > 0) {
            int valueInt = Integer.parseInt(value);
            if (valueInt > 1) {
                String valueString = String.valueOf(valueInt - 1);
                productQuantity.setText(valueString);
                substract.setEnabled(true);
                plus.setEnabled(true);
            } else {
                alert("Không thể bớt số lượng được nữa");
                substract.setEnabled(false);
                plus.setEnabled(true);
            }
        } else {
            productQuantity.setText("1");
        }

    }//GEN-LAST:event_substractActionPerformed
    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        String value = productQuantity.getText();
        if (value.length() > 0) {
            int valueInt = Integer.parseInt(value);
            int result;
            if (valueInt > quantityOrder) {
                result = valueInt - quantityOrder;
                if (result >= leftQuantityProduct) {
                    plus.setEnabled(false);
                    substract.setEnabled(true);
                    alert("Không thể thêm số lượng. Số lượng còn lại: " + leftQuantityProduct);
                } else {
                    String valueString = String.valueOf(valueInt + 1);
                    productQuantity.setText(valueString);
                    plus.setEnabled(true);
                    substract.setEnabled(true);
                }
            } else if (valueInt == quantityOrder) {
                result = valueInt;
                result = valueInt - quantityOrder;
                if (result >= leftQuantityProduct) {
                    plus.setEnabled(false);
                    substract.setEnabled(true);
                    alert("Không thể thêm số lượng. Số lượng còn lại: " + leftQuantityProduct);
                } else {
                    String valueString = String.valueOf(valueInt + 1);
                    productQuantity.setText(valueString);
                    plus.setEnabled(true);
                    substract.setEnabled(true);
                }
            } else {
                String valueString = String.valueOf(valueInt + 1);
                productQuantity.setText(valueString);
                plus.setEnabled(true);
                substract.setEnabled(true);
            }
        } else {
            productQuantity.setText("1");
        }

    }//GEN-LAST:event_plusActionPerformed

    private void productQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productQuantityKeyPressed
        String value = productQuantity.getText();
        char keyChar = evt.getKeyChar();
        if (keyChar >= '0' && keyChar <= '9') {
            if (value.length() >= 3) {
                productQuantity.setEditable(false);
            } else {
                productQuantity.setEditable(true);
            }
        } else {
            if (evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE) {
                productQuantity.setEditable(true);
            } else {
                productQuantity.setEditable(false);
            }
        }
    }//GEN-LAST:event_productQuantityKeyPressed

    private void comboxAreaitemchange(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboxAreaitemchange

    }//GEN-LAST:event_comboxAreaitemchange

    private void comboxAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxAreaActionPerformed
        comboxModelTable.removeAllElements();
        Area selectedArea = (Area) comboxArea.getSelectedItem();
        Area findArea = ai.findAreaByName(selectedArea.getAreaName());
        List<CoffeeTable> getAllCoffeeTablesByTwoStatus = cti.getAllCoffeeTablesByTwoStatus(findArea.getAreaId(), 1, 2);
        for (CoffeeTable c : getAllCoffeeTablesByTwoStatus) {
            Customer customerByTableId = cusi.getCustomerByTableId(c.getTableId(), 0);
            if (c.getStatus() == 2) {
                if (customerByTableId != null && customerByTableId.getStatus() == 1) {
                    comboxModelTable.addElement(c);
                }
            } else {
                comboxModelTable.addElement(c);
            }
        }
        comboxTable.setModel(comboxModelTable);
    }//GEN-LAST:event_comboxAreaActionPerformed

    private void comboxTableitemchange(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboxTableitemchange
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxTableitemchange

    private void comboxTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboxTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboxTableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateOrderDetailJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateOrderDetailJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateOrderDetailJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateOrderDetailJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new updateOrderDetailJFrame().setVisible(true);
            }
        });
    }
    
    private void alert(String message) {
        al = new help(message);
        al.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboxArea;
    private javax.swing.JComboBox comboxTable;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelUpdate;
    private javax.swing.JButton plus;
    private javax.swing.JTextField productName;
    private javax.swing.JTextField productQuantity;
    private javax.swing.JButton substract;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

}
