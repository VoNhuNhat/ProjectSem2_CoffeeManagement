/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.CategoryImplements;
import DAO.ProductImplements;
import DAO.TableProductImplements;
import Helpers.DialogHelpers;
import Helpers.UserHelpers;
import data.Category;
import data.Product;
import data.TableProduct;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class ProductJFrame extends javax.swing.JFrame {

    DefaultListModel listModel = new DefaultListModel();
    DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
    TableProductImplements tpi = new TableProductImplements();
    ProductImplements pi = new ProductImplements();

    /**
     * Creates new form ProductJFrame
     */
    public ProductJFrame() {
        initComponents();
        setLocationRelativeTo(null);
        loadCategory();
        loadProduct();
        loadBannerLeft();
        loadBannerRight();
    }

    File image = null;
    help al;
    DialogHelpers dialog;

    public void loadCategory() {
        listModel.removeAllElements();
        List<Category> list = new CategoryImplements().listOfCategory();
        comboBoxModel.removeAllElements();
        for (Category c : list) {
            listModel.addElement(c.getCateName());
            comboBoxModel.addElement(c);
        }
        listmon.setModel(listModel);
        cboDMM.setModel(comboBoxModel);
    }

    public void loadProduct() {
        DefaultTableModel tableModel = (DefaultTableModel) tblMon.getModel();
        tableModel.setRowCount(0);
        List<Product> list = new ProductImplements().listOfProduct();
        for (Product p : list) {
            Object[] data = {p.getCateId().getCateName(), p.getProName(), p.getPrice(), p.getQuantity(), p.getProImage()};
            tableModel.addRow(data);
        }
        tblMon.setModel(tableModel);
    }

    public void loadProductByCategory(int cateId) {
        DefaultTableModel tableModel = (DefaultTableModel) tblMon.getModel();
        tableModel.setRowCount(0);
        List<Product> list = new ProductImplements().showProductByCategory(cateId);
        for (Product p : list) {
            Object[] data = {p.getCateId().getCateName(), p.getProName(), p.getPrice(), p.getQuantity(), p.getProImage()};
            tableModel.addRow(data);
        }
        tblMon.setModel(tableModel);
    }

    public void loadBannerLeft() {
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("logos", "guita.jpg"));
            Image imageScale = img.getScaledInstance(lblguita.getWidth(), lblguita.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(imageScale);
            lblguita.setIcon(imageIcon);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadBannerRight() {
        BufferedImage img = null;
        try {
            img = ImageIO.read(new File("logos", "bannercf.PNG"));
            Image imageScale = img.getScaledInstance(lblbanner.getWidth(), lblbanner.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(imageScale);
            lblbanner.setIcon(imageIcon);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void alert(String message) {
        al = new help(message);
        al.setVisible(true);
    }

    private void resetFormCate() {
        txtTenLoaiMon.setText("");
        loadCategory();
        loadProduct();
        btnInsert1.setEnabled(true);
    }

    private void resetFormProduct() {
        cboDMM.setSelectedIndex(0);
        txtTenMon.setText("");
        txtDonGia.setText("");
        txtSoLuong.setText("");
        lblHinh.setIcon(null);
        lblHinh.setToolTipText("");
        txtTimKiem.setText("");
        loadCategory();
        loadProduct();
        btnInsert.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelClose = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelMin = new javax.swing.JLabel();
        btndx = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        PanelThucdon = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listmon = new javax.swing.JList<>();
        jLabel23 = new javax.swing.JLabel();
        txtTenLoaiMon = new javax.swing.JTextField();
        btnInsert1 = new javax.swing.JButton();
        btnUpdate1 = new javax.swing.JButton();
        btnDelete1 = new javax.swing.JButton();
        lblguita = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMon = new javax.swing.JTable();
        txtTenMon = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtDonGia = new javax.swing.JTextField();
        cboDMM = new javax.swing.JComboBox<>();
        btnInsert = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblHinh = new javax.swing.JLabel();
        btnUpImages = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblbanner = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));
        jPanel1.setPreferredSize(new java.awt.Dimension(1366, 52));

        jLabelClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose.setText("X");
        jLabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Sản phẩm");

        jLabelMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelMin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMin.setText("-");
        jLabelMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
        });

        btndx.setBackground(new java.awt.Color(34, 167, 240));
        btndx.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btndx.setForeground(new java.awt.Color(255, 255, 255));
        btndx.setText("Trở về");
        btndx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btndx, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(559, 559, 559)
                .addComponent(jLabelMin)
                .addGap(18, 18, 18)
                .addComponent(jLabelClose)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelClose)
                            .addComponent(jLabel2))
                        .addGap(745, 745, 745))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btndx)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel2.setBackground(new java.awt.Color(44, 62, 80));
        jPanel2.setPreferredSize(new java.awt.Dimension(1366, 710));

        PanelThucdon.setBackground(new java.awt.Color(248, 148, 6));

        jPanel6.setBackground(new java.awt.Color(44, 62, 80));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DANH MỤC LOẠI MÓN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(204, 102, 0))); // NOI18N

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        listmon.setBackground(new java.awt.Color(102, 51, 0));
        listmon.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        listmon.setForeground(java.awt.Color.white);
        listmon.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        listmon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listmonMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listmon);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Tên Loại Món:");

        txtTenLoaiMon.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtTenLoaiMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenLoaiMonActionPerformed(evt);
            }
        });

        btnInsert1.setBackground(new java.awt.Color(34, 167, 240));
        btnInsert1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsert1.setForeground(new java.awt.Color(255, 255, 255));
        btnInsert1.setText("Thêm");
        btnInsert1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsert1ActionPerformed(evt);
            }
        });

        btnUpdate1.setBackground(new java.awt.Color(34, 167, 240));
        btnUpdate1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate1.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate1.setText("Sửa");
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });

        btnDelete1.setBackground(new java.awt.Color(242, 38, 19));
        btnDelete1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete1.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete1.setText("Xóa");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        lblguita.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnReset.setBackground(new java.awt.Color(34, 167, 240));
        btnReset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Làm Mới");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnInsert1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTenLoaiMon, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(lblguita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(lblguita, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtTenLoaiMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert1)
                    .addComponent(btnUpdate1)
                    .addComponent(btnDelete1)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(44, 62, 80));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SẢN PHẨM-MÓN ĂN-NƯỚC", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(255, 153, 0))); // NOI18N
        jPanel7.setForeground(new java.awt.Color(255, 0, 51));

        tblMon.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblMon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loại Món", "Tên Món", "Đơn Giá", "Số Lượng", "Thông Tin Hình"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMon.getTableHeader().setReorderingAllowed(false);
        tblMon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMonMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblMon);

        txtTenMon.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Danh mục:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Tên Món:");

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Đơn giá:");

        txtDonGia.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        cboDMM.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cboDMM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnInsert.setBackground(new java.awt.Color(34, 167, 240));
        btnInsert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsert.setForeground(new java.awt.Color(255, 255, 255));
        btnInsert.setText("Thêm");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(34, 167, 240));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Làm Mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(242, 38, 19));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(34, 167, 240));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        btnUpImages.setBackground(new java.awt.Color(34, 167, 240));
        btnUpImages.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpImages.setForeground(new java.awt.Color(255, 255, 255));
        btnUpImages.setText("Chọn Ảnh");
        btnUpImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpImagesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblHinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnUpImages, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(btnUpImages, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHinh, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Số lượng:");

        txtSoLuong.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtTimKiem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyPressed(evt);
            }
        });

        btnTimKiem.setBackground(new java.awt.Color(34, 167, 240));
        btnTimKiem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setText("Tìm Kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel29)
                                        .addGap(25, 25, 25)
                                        .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addGap(26, 26, 26)
                                        .addComponent(txtTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtTimKiem)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel26)
                                        .addGap(42, 42, 42)
                                        .addComponent(cboDMM, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(81, 81, 81)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTimKiem))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(cboDMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimKiem)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(44, 62, 80));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addComponent(lblbanner, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblbanner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PanelThucdonLayout = new javax.swing.GroupLayout(PanelThucdon);
        PanelThucdon.setLayout(PanelThucdonLayout);
        PanelThucdonLayout.setHorizontalGroup(
            PanelThucdonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelThucdonLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelThucdonLayout.setVerticalGroup(
            PanelThucdonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelThucdonLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(PanelThucdonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(PanelThucdon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(PanelThucdon, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1368, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelCloseMouseClicked

    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabelMinMouseClicked

    private void listmonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listmonMouseClicked
        btnInsert1.setEnabled(false);
        String cateName = listmon.getSelectedValue();
        if (cateName != null) {
            txtTenLoaiMon.setText(cateName);
            Category c = new CategoryImplements().findCategoryByName(cateName);
            loadProductByCategory(c.getCateId());
        } else {
            alert("Hãy thêm loại món");
        }
    }//GEN-LAST:event_listmonMouseClicked

    private void btnInsert1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsert1ActionPerformed
        String cateName = txtTenLoaiMon.getText();

        int i = 0;

        if (UserHelpers.User.getUserId() != 1) {
            alert("Chỉ admin có quyền thêm loại món");
        } else {
            i += 1;
        }

        if (i == 1 && cateName.length() == 0) {
            alert("Chưa nhập tên loại món");
        } else {
            if (cateName.length() > 100) {
                alert("Tên loại món không quá 100 ký tự");
            } else {
                boolean bl = new CategoryImplements().checkCategoryName(cateName);
                if (bl) {
                    alert("Loại món đã tồn tại");
                } else {
                    i += 1;
                }
            }
        }

        if (i == 2) {
            Category c = new Category();
            c.setCateName(cateName);
            boolean bl = new CategoryImplements().insertNewCategory(c);
            if (bl) {
                alert("Thêm mới thành công");
                loadCategory();
                resetFormCate();
            } else {
                alert("Thêm mới không thành công");
            }
        }
    }//GEN-LAST:event_btnInsert1ActionPerformed

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        String oldCateName = listmon.getSelectedValue();
        String newCateName = txtTenLoaiMon.getText();

        int i = 0;

        if (UserHelpers.User.getUserId() != 1) {
            alert("Chỉ admin có quyền sửa loại món");
        } else {
            i += 1;
        }

        if (i == 1 && oldCateName == null) {
            alert("Chưa chọn loại món cần sửa");
        } else {
            i += 1;
        }

        if (i == 2 && newCateName.length() == 0) {
            alert("Chưa nhập tên loại món");
        } else {
            if (newCateName.length() > 100) {
                alert("Tên loại món không quá 100 ký tự");
            } else {
                List<Category> list = new CategoryImplements().checkExistCategory(oldCateName, newCateName);
                if (!list.isEmpty()) {
                    alert("Loại món đã tồn tại");
                } else {
                    i += 1;
                }
            }
        }

        if (i == 3) {
            Category cateId = new CategoryImplements().findCategoryByName(oldCateName);
            Category c = new Category();
            c.setCateId(cateId.getCateId());
            c.setCateName(newCateName);
            boolean bl = new CategoryImplements().updateCategory(c);
            if (bl) {
                alert("Sửa thành công");
                loadCategory();
                resetFormCate();
            } else {
                alert("Sửa không thành công");
            }
        }
    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        String cateName = listmon.getSelectedValue();

        int i = 0;

        if (UserHelpers.User.getUserId() != 1) {
            alert("Chỉ admin có quyền xóa loại món");
        } else {
            i += 1;
        }

        if (i == 1 && cateName == null) {
            alert("Chưa chọn loại món cần xóa");
        } else {
            i += 1;
        }

        if (i == 2) {
            int confirm = DialogHelpers.confirm(this, "Bạn có chắc chắn muốn xóa loại món này ?");
            if (confirm == JOptionPane.YES_OPTION) {
                Category c = new CategoryImplements().findCategoryByName(cateName);
                List<Product> list = new ProductImplements().showProductByCategory(c.getCateId());
                if (!list.isEmpty()) {
                    boolean error = false;
                    for (Product p : list) {
                        List<TableProduct> tableProductByProduct = tpi.getTableProductByProduct(p.getProId());
                        if (!tableProductByProduct.isEmpty()) {
                            error = true;
                            break;
                        }
                    }
                    if (error == false) {
                        boolean bl = new CategoryImplements().deleteCategoryAndProduct(c.getCateId(), cateName);
                        if (bl) {
                            alert("Xóa thành công");
                            loadCategory();
                            loadProduct();
                            resetFormCate();
                        } else {
                            alert("Xóa không thành công");
                        }
                    } else {
                        alert("Không thể xóa loại sản phẩm đang chứa sản phẩm có trong hóa đơn");
                    }
                } else {
                    boolean bl = new CategoryImplements().deleteCategory(c.getCateId());
                    if (bl) {
                        alert("Xóa thành công");
                        loadCategory();
                        loadProduct();
                        resetFormCate();
                    } else {
                        alert("Xóa không thành công");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        Category c = (Category) cboDMM.getSelectedItem();
        String proName = txtTenMon.getText();
        String proPrice = txtDonGia.getText();
        String proQuantity = txtSoLuong.getText();
        String proImage = null;
        if (image != null) {
            proImage = lblHinh.getToolTipText();
        }

        int i = 0;

        if (UserHelpers.User.getUserId() != 1) {
            alert("Chỉ admin có quyền thêm món");
        } else {
            i += 1;
        }

        if (i == 1 && c == null) {
            alert("Hãy thêm loại món trước khi thêm món");
        } else {
            i += 1;
        }

        if (i == 2 && proName.length() == 0) {
            alert("Chưa nhập tên món");
        } else {
            if (proName.length() > 50) {
                alert("Tên món không quá 50 ký tự");
            } else {
                boolean bl = new ProductImplements().findProductByProName(proName);
                if (bl) {
                    alert("Tên món đã tồn tại");
                } else {
                    i += 1;
                }
            }
        }

        double price = 0;
        if (i == 3 && proPrice.length() == 0) {
            alert("Chưa nhập đơn giá");
        } else {
            try {
                if (i == 3) {
                    price = Double.parseDouble(proPrice);
                    if (price < 1000) {
                        alert("Vui lòng nhập đơn giá từ 1000 trở lên");
                    } else {
                        i += 1;
                    }
                }
            } catch (Exception e) {
                alert("Đơn giá phải là số");
            }
        }

        int quantity = 0;
        if (i == 4 && proQuantity.length() == 0) {
            alert("Chưa nhập số lượng");
        } else {
            try {
                if (i == 4) {
                    quantity = Integer.parseInt(proQuantity);
                    if (quantity < 1) {
                        alert("Vui lòng nhập số lượng lớn hơn 0");
                    } else {
                        i += 1;
                    }
                }
            } catch (Exception e) {
                alert("Số lượng phải là số");
            }
        }

        if (i == 5) {
            Product p = new Product();
            p.setProName(proName);
            p.setCateId(c);
            p.setPrice(price);
            p.setQuantity(quantity);
            p.setProImage(proImage);
            boolean bl = new ProductImplements().insertNewProduct(p);
            if (bl) {
                if (image != null) {
                    UserHelpers.saveImage(image);
                    image = null;
                }
                alert("Thêm mới thành công");
                loadProduct();
                resetFormProduct();
            } else {
                alert("Thêm mới không thành công");
            }
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        resetFormProduct();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int index = tblMon.getSelectedRow();

        int i = 0;

        if (UserHelpers.User.getUserId() != 1) {
            alert("Chỉ admin có quyền xóa món");
        } else {
            i += 1;
        }

        if (i == 1 && index == -1) {
            alert("Chưa chọn món cần xóa");
        } else {
            i += 1;
        }

        if (i == 2) {
            String proName = (String) tblMon.getValueAt(index, 1);
            Product p = new ProductImplements().findProductByName(proName);
            int confirm = DialogHelpers.confirm(this, "Bạn có chắc chắn muốn xóa món này ?");
            if (confirm == JOptionPane.YES_OPTION) {
                List<TableProduct> tableProductByProduct = tpi.getTableProductByProduct(p.getProId());
                if (!tableProductByProduct.isEmpty()) {
                    alert("Sản phẩm đang có thông tin trong hóa đơn không thể xóa được");
                } else {
                    boolean bl = new ProductImplements().deleteProduct(p.getProId());
                    if (bl) {
                        alert("Xóa thành công");
                        loadProduct();
                        resetFormProduct();
                    } else {
                        alert("Xóa không thành công");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int index = tblMon.getSelectedRow();
        String oldProName = null;
        if (index > 0 || index == 0) {
            oldProName = (String) tblMon.getValueAt(index, 1);
        }

        Category c = (Category) cboDMM.getSelectedItem();
        String newProName = txtTenMon.getText();
        String proPrice = txtDonGia.getText();
        String proQuantity = txtSoLuong.getText();
        String proImage = null;
        if (lblHinh.getToolTipText() != "") {
            proImage = lblHinh.getToolTipText();
        }

        int i = 0;

        if (UserHelpers.User.getUserId() != 1) {
            alert("Chỉ admin có quyền sửa món");
        } else {
            i += 1;
        }

        if (i == 1 && index == -1) {
            alert("Chưa chọn loại món cần sửa");
        } else {
            i += 1;
        }

        if (i == 2 && newProName.length() == 0) {
            alert("Chưa nhập tên món");
        } else {
            if (newProName.length() > 50) {
                alert("Tên món không quá 50 ký tự");
            } else {
                List<Product> list = new ProductImplements().checkExistProduct(oldProName, newProName);
                if (!list.isEmpty()) {
                    alert("Tên món đã tồn tại");
                } else {
                    i += 1;
                }
            }
        }

        double price = 0;
        if (i == 3 && proPrice.length() == 0) {
            alert("Chưa nhập đơn giá");
        } else {
            try {
                if (i == 3) {
                    price = Double.parseDouble(proPrice);
                    if (price < 1000) {
                        alert("Vui lòng nhập đơn giá từ 1000 trở lên");
                    } else {
                        i += 1;
                    }
                }
            } catch (Exception e) {
                alert("Đơn giá phải là số");
            }
        }

        int quantity = 0;
        if (i == 4 && proQuantity.length() == 0) {
            alert("Chưa nhập số lượng");
        } else {
            try {
                if (i == 4) {
                    quantity = Integer.parseInt(proQuantity);
                    if (quantity < 1) {
                        alert("Vui lòng nhập số lượng lớn hơn 0");
                    } else {
                        i += 1;
                    }
                }
            } catch (Exception e) {
                alert("Số lượng phải là số");
            }
        }

        if (i == 5) {
            Product proId = new ProductImplements().findProductByName(oldProName);
            Product p = new Product();
            p.setProName(newProName);
            p.setCateId(c);
            p.setPrice(price);
            p.setQuantity(quantity);
            p.setProImage(proImage);
            p.setProId(proId.getProId());
            boolean bl = new ProductImplements().updateProduct(p);
            if (bl) {
                if (image != null) {
                    UserHelpers.saveImage(image);
                    image = null;
                }
                alert("Sửa thành công");
                loadProduct();
                resetFormProduct();
            } else {
                alert("Sửa không thành công");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnUpImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpImagesActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "png");
        fileChooser.setFileFilter(filter);
        try {
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File fileImage = fileChooser.getSelectedFile();
                image = fileImage;
                try {
                    BufferedImage img = ImageIO.read(fileImage.getAbsoluteFile());
                    Image imageScale = img.getScaledInstance(lblHinh.getWidth(), lblHinh.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon imageIcon = new ImageIcon(imageScale);
                    lblHinh.setIcon(imageIcon);
                    lblHinh.setToolTipText(fileImage.getName());
                } catch (IOException ex) {
                    Logger.getLogger(EmployeeJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception e) {
            alert("Chỉ được chọn ảnh có đuôi jpg hoặc png !!!");
        }
    }//GEN-LAST:event_btnUpImagesActionPerformed

    private void txtTenLoaiMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenLoaiMonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenLoaiMonActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetFormCate();
    }//GEN-LAST:event_btnResetActionPerformed
    public void searchProduct() {
        String proName = txtTimKiem.getText();
        DefaultTableModel tableModel = (DefaultTableModel) tblMon.getModel();
        tableModel.setRowCount(0);
        List<Product> list = new ProductImplements().searchProductByName(proName);
        if (!list.isEmpty()) {
            for (Product p : list) {
                Object[] data = {p.getCateId().getCateName(), p.getProName(), p.getPrice(), p.getQuantity(), p.getProImage()};
                tableModel.addRow(data);
            }
            tblMon.setModel(tableModel);
        } else {
            alert("Không có sản phẩm nào được tìm thấy");
            tableModel.setRowCount(0);
        }
    }
    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        searchProduct();
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void tblMonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMonMouseClicked
        btnInsert.setEnabled(false);
        int index = tblMon.getSelectedRow();
        Category c = new Category();
        c.setCateName(tblMon.getValueAt(index, 0) + "");
        cboDMM.setSelectedItem(c);
        txtTenMon.setText(tblMon.getValueAt(index, 1) + "");
        txtDonGia.setText(tblMon.getValueAt(index, 2) + "");
        txtSoLuong.setText(tblMon.getValueAt(index, 3) + "");
        String proName = (String) tblMon.getValueAt(index, 1);
        Product p = new ProductImplements().findProductByName(proName);
        if (p.getProImage() != null) {
            BufferedImage img = null;
            try {
                img = ImageIO.read(new File("logos", p.getProImage()));
                Image imageScale = img.getScaledInstance(lblHinh.getWidth(), lblHinh.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon imageIcon = new ImageIcon(imageScale);
                lblHinh.setIcon(imageIcon);
                lblHinh.setToolTipText(p.getProImage());
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            lblHinh.setIcon(null);
            lblHinh.setToolTipText("");
        }
    }//GEN-LAST:event_tblMonMouseClicked

    private void btndxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndxActionPerformed
        MainJFrame mj = new MainJFrame();
        mj.setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btndxActionPerformed

    private void txtTimKiemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchProduct();
        }
    }//GEN-LAST:event_txtTimKiemKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelThucdon;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnInsert1;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnUpImages;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.JButton btndx;
    private javax.swing.JComboBox<String> cboDMM;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblHinh;
    private javax.swing.JLabel lblbanner;
    private javax.swing.JLabel lblguita;
    private javax.swing.JList<String> listmon;
    private javax.swing.JTable tblMon;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenLoaiMon;
    private javax.swing.JTextField txtTenMon;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
