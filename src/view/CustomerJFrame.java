package view;

import DAO.AreaImplements;
import DAO.CoffeeTableImplements;
import DAO.CustomerImplements;
import DAO.OrderCoffeeImplements;
import DAO.OrderDetailImplements;
import DAO.UserImplements;
import Helpers.DialogHelpers;
import Helpers.UserHelpers;
import data.Area;
import data.CoffeeTable;
import data.Customer;
import data.OrderCoffee;
import data.OrderDetail;
import data.UserAccount;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author omar
 */
public class CustomerJFrame extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    JPanel jps;
    List<JPanel> listjp = new ArrayList<JPanel>();
    DefaultListModel<String> listModel;
    help al;
    CustomerImplements ci = new CustomerImplements();
    CoffeeTableImplements cti = new CoffeeTableImplements();
    DefaultComboBoxModel dcm = new DefaultComboBoxModel();
    AreaImplements ai = new AreaImplements();
    OrderCoffeeImplements oci = new OrderCoffeeImplements();
    OrderDetailImplements odi = new OrderDetailImplements();
    UserAccount userCurrent = UserHelpers.User;

    public CustomerJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        loadComboxStatus();
        loadDataTable();
        loadListTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        fullname = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        female = new javax.swing.JRadioButton();
        male = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        comboxStatus = new javax.swing.JComboBox();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        hourArrive = new javax.swing.JSpinner(sm);
        phoneNumber = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTable = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        dateArrive = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabelClose = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelMin = new javax.swing.JLabel();
        btndx = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel3.setBackground(new java.awt.Color(44, 62, 80));
        jPanel3.setMaximumSize(new java.awt.Dimension(1366, 768));
        jPanel3.setMinimumSize(new java.awt.Dimension(1366, 768));
        jPanel3.setPreferredSize(new java.awt.Dimension(1366, 768));

        jPanel2.setBackground(new java.awt.Color(44, 62, 80));
        jPanel2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(236, 240, 241));
        jLabel4.setText("Thông tin khách hàng");

        tableView.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ KHÁCH HÀNG", "HỌ VÀ TÊN", "SỐ ĐIỆN THOẠI", "EMAIL", "GIỚI TÍNH", "NGÀY ĐẾN", "GIỜ ĐẾN", "TRẠNG THÁI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableView.setInheritsPopupMenu(true);
        tableView.getTableHeader().setReorderingAllowed(false);
        tableView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableViewMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableView);
        if (tableView.getColumnModel().getColumnCount() > 0) {
            tableView.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(236, 240, 241));
        jLabel5.setText("Thêm mới, cập nhật, xóa thông tin khách hàng");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Họ và tên:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Giờ đến:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Giới tính:");

        fullname.setBackground(new java.awt.Color(108, 122, 137));
        fullname.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fullname.setForeground(new java.awt.Color(228, 241, 254));
        fullname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullnameActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Số điện thoại:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Email:");

        email.setBackground(new java.awt.Color(108, 122, 137));
        email.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        email.setForeground(new java.awt.Color(228, 241, 254));
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(34, 167, 240));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(242, 38, 19));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnInsert.setBackground(new java.awt.Color(34, 167, 240));
        btnInsert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsert.setForeground(new java.awt.Color(255, 255, 255));
        btnInsert.setText("Thêm");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(34, 167, 240));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Cập Nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        buttonGroupGender.add(female);
        female.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        female.setForeground(new java.awt.Color(255, 255, 255));
        female.setText("Nữ");

        buttonGroupGender.add(male);
        male.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        male.setForeground(new java.awt.Color(255, 255, 255));
        male.setSelected(true);
        male.setText("Nam");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Ngày đến:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Trạng thái:");

        comboxStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboxStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        JSpinner.DateEditor de = new JSpinner.DateEditor(hourArrive, "HH:mm");
        hourArrive.setEditor(de);
        hourArrive.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        phoneNumber.setBackground(new java.awt.Color(108, 122, 137));
        phoneNumber.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        phoneNumber.setForeground(new java.awt.Color(228, 241, 254));
        phoneNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneNumberActionPerformed(evt);
            }
        });

        listTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        listTable.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listTable);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Bàn:");

        dateArrive.setDateFormatString("dd/MM/yyyy");
        dateArrive.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(481, 481, 481)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fullname, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(112, 112, 112)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))))
                                .addGap(11, 11, 11)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(male)
                                        .addGap(46, 46, 46)
                                        .addComponent(female))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(btnUpdate)
                                .addGap(70, 70, 70)
                                .addComponent(btnClear)
                                .addGap(35, 35, 35)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel15))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboxStatus, 0, 201, Short.MAX_VALUE)
                                    .addComponent(hourArrive)
                                    .addComponent(dateArrive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1315, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(female)
                                .addComponent(male)
                                .addComponent(jLabel13)
                                .addComponent(fullname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel10)
                                        .addComponent(phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hourArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(47, 47, 47)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15)
                                    .addComponent(comboxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                .addGap(48, 48, 48)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(dateArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));

        jLabelClose.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose.setText("X");
        jLabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCloseMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Quản lí khách hàng");

        jLabelMin.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelMin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMin.setText("-");
        jLabelMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
        });

        btndx.setBackground(new java.awt.Color(34, 167, 240));
        btndx.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btndx.setForeground(new java.awt.Color(255, 255, 255));
        btndx.setText("Trở về");
        btndx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btndx, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(483, 483, 483)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 530, Short.MAX_VALUE)
                .addComponent(jLabelMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelClose)
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelMin, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelClose))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btndx)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1376, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void loadListTable() {
        listModel = new DefaultListModel<>();
        List<Area> allAreas = ai.getAllAreas();
        for (Area nv : allAreas) {
            jps = new JPanel();
            jps.setName(nv.getAreaName());
            listjp.add(jps);
        }
        for (int i = 0; i < allAreas.size(); i++) {
            Area a = ai.findAreaByName(listjp.get(i).getName());
            List<CoffeeTable> allCoffeeTables = cti.getAllCoffeeTablesByStatus(a.getAreaId(), 0);
            listModel.addElement("               " + a.getAreaName() + "                                                  -" + a.getAreaId());
            for (CoffeeTable ac : allCoffeeTables) {
                listModel.addElement(ac.getTableName() + "                                                  -" + ac.getTableId());
            }
        }
        listTable.setModel(listModel);
    }

    public void loadListTableUpdate(Integer cusId) {
        listModel = new DefaultListModel<>();
        List<CoffeeTable> ctbc = new CoffeeTableImplements().getCoffeeTablesByCustomer(cusId);
        List<Area> allAreas = ai.getAllAreas();
        for (Area nv : allAreas) {
            jps = new JPanel();
            jps.setName(nv.getAreaName());
            listjp.add(jps);
        }
        for (int i = 0; i < allAreas.size(); i++) {
            Area a = ai.findAreaByName(listjp.get(i).getName());
            List<CoffeeTable> allCoffeeTables = cti.getAllCoffeeTables(a.getAreaId());
            listModel.addElement("               " + a.getAreaName() + "                                                  -" + a.getAreaId());
            for (CoffeeTable ac : allCoffeeTables) {
                if (ac.getStatus() == 0) {
                    listModel.addElement(ac.getTableName() + "                                                  -" + ac.getTableId());
                }
                for (CoffeeTable ct : ctbc) {
                    if (ct.getTableId() == ac.getTableId()) {
                        listModel.addElement(ac.getTableName() + "                                                  -" + ac.getTableId());
                    }
                }
            }
        }
        listTable.setModel(listModel);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < listModel.size(); i++) {
            if (listModel.getElementAt(i).charAt(0) != ' ') {
                String tableSelected = listModel.getElementAt(i);
                String[] splitTable = tableSelected.split("-");
                int tableId = Integer.parseInt(splitTable[1]);
                for (CoffeeTable ct : ctbc) {
                    if (ct.getTableId() == tableId) {
                        list.add(i);
                    }
                }
            }
        }

        int[] arrayInt = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            arrayInt[i] = list.get(i);
        }

        listTable.setSelectedIndices(arrayInt);
    }

    public void loadComboxStatus() {
        dcm.addElement("Khách đã đặt");
        dcm.addElement("Khách đã đến");
        dcm.addElement("Khách hủy");
        comboxStatus.setModel(dcm);
    }

    public void loadDataTable() {
        DefaultTableModel dataTable = (DefaultTableModel) tableView.getModel();
        dataTable.setRowCount(0);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        List<Customer> allCustomers = ci.getAllCustomers();
        for (Customer c : allCustomers) {
            String formatDateArrive = sdf.format(c.getArriveDate());
            Object[] data = {
                c.getCusId(),
                c.getFullname(),
                c.getPhoneNumber(),
                c.getEmail(),
                (c.getGender() == 0 ? "Nữ" : "Nam"),
                formatDateArrive, c.getArriveHour(),
                (c.getStatus() == 0 ? "Khách đã đặt" : (c.getStatus() == 1) ? "Khách đã đến" : (c.getStatus() == 2) ? "Khách đã thanh toán" : "Khách hủy")
            };
            dataTable.addRow(data);
        }
        tableView.setModel(dataTable);
    }

    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCloseMouseClicked

        System.exit(0);

    }//GEN-LAST:event_jLabelCloseMouseClicked

    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseClicked

        this.setState(JFrame.ICONIFIED);

    }//GEN-LAST:event_jLabelMinMouseClicked


    private void tableViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewMouseClicked
        btnInsert.setEnabled(false);
        int index = tableView.getSelectedRow();
        if (index > 0 || index == 0) {
            int cusId = (int) tableView.getValueAt(index, 0);
            String fullname = (String) tableView.getValueAt(index, 1);
            String phone = (String) tableView.getValueAt(index, 2);
            String email = (String) tableView.getValueAt(index, 3);
            String gender = (String) tableView.getValueAt(index, 4);
            String date = (String) tableView.getValueAt(index, 5);
            Time hour = (Time) tableView.getValueAt(index, 6);
            String status = (String) tableView.getValueAt(index, 7);

            if (status == "Khách đã đặt" || status == "Khách đã đến") {
                this.fullname.setText(fullname);
                phoneNumber.setText(phone);
                this.email.setText(email);
                if (gender.equals("Nữ")) {
                    female.setSelected(true);
                } else {
                    male.setSelected(true);
                }
                Date date1 = null;
                try {
                    date1 = new SimpleDateFormat("dd/MM/yyyy").parse(date);
                } catch (ParseException ex) {
                    Logger.getLogger(CustomerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                dateArrive.setDate(date1);
                hourArrive.setValue(hour);
                comboxStatus.setSelectedItem(status);
                int stt = comboxStatus.getSelectedIndex();
                Customer c = new CustomerImplements().getCustomerByCusId(cusId);
                loadListTableUpdate(c.getCusId());
                btnDelete.setEnabled(false);
                if (status == "Khách đã đến") {
                    btnUpdate.setEnabled(false);
                } else {
                    btnUpdate.setEnabled(true);
                }
            } else {
                this.fullname.setText("");
                phoneNumber.setText("");
                this.email.setText("");
                dateArrive.setDate(null);
                comboxStatus.setSelectedIndex(0);
                loadListTable();
                btnUpdate.setEnabled(false);
                if (status == "Khách đã thanh toán") {
                    btnDelete.setEnabled(false);
                } else {
                    btnDelete.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_tableViewMouseClicked


    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        String fullname = this.fullname.getText();
        String phoneNumber = this.phoneNumber.getText();
        String email = this.email.getText();
        int gender = 0;
        if (male.isSelected()) {
            gender = 1;
        }
        if (female.isSelected()) {
            gender = 0;
        }
        Date arriveDate = dateArrive.getDate();
        Date arriveHour = (Date) hourArrive.getValue();
        Time ptime = new Time(arriveHour.getTime());
        int status = comboxStatus.getSelectedIndex();
        List<String> selectedValues = listTable.getSelectedValuesList();

        if (userCurrent != null) {
            int i = 0;
            if (i == 0 && fullname.length() == 0) {
                alert("Hãy nhập họ và tên khách hàng");
            } else {
                i++;
            }
            if (i == 1 && phoneNumber.length() == 0) {
                alert("Hãy nhập số điện thoại");
            } else {
                if (i == 1 && !phoneNumber.matches("^[0-9]+$")) {
                    alert("Số điện thoại phải là số và không chứa kí tự đặc biệt");
                } else {
                    if ((i == 1 && phoneNumber.length() > 10) || (i == 1 && phoneNumber.length() < 10)) {
                        alert("Số điện thoại phải là 10 số");
                    } else {
                        i++;
                    }
                }
            }
            if (i == 2 && email.length() == 0) {
                alert("Hãy nhập email");
            } else {
                Pattern p = Pattern.compile("^[a-z[_]](\\w*[.]?[_]?\\w*)*[@]\\w{3,}[.]\\w{3,}([.]?\\w{2,})?$");
                Matcher m;
                m = p.matcher(email);
                if (i == 2 && !m.find()) {
                    alert("Email không đúng định dạng");
                } else {
                    i++;
                }
            }
            if (i == 3 && selectedValues.isEmpty()) {
                alert("Hãy chọn bàn");
            } else {
                boolean bl = true;
                for (String s : selectedValues) {
                    if (s.charAt(0) == ' ') {
                        bl = false;
                    }
                }
                if (i == 3 && bl == true) {
                    i++;
                }
                if (i == 3 && bl == false) {
                    alert("Không được chọn khu vực khi đặt bàn");
                }
            }
            ZoneId defaultZoneId = ZoneId.systemDefault();
            LocalDate localDate = java.time.LocalDate.now();
            Date currentDate = Date.from(localDate.atStartOfDay(defaultZoneId).toInstant());
            String currentDateString = "";
            String arriveDateString = "";
            if (i == 4 && arriveDate == null) {
                alert("Hãy chọn ngày đến");
            } else {
                if (i == 4) {
                    if (arriveDate.compareTo(currentDate) > 0 || arriveDate.compareTo(currentDate) == 0) {
                        i++;
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                        currentDateString = String.valueOf(sdf.format(currentDate));
                        arriveDateString = String.valueOf(sdf.format(arriveDate));
                    } else {
                        alert("Ngày được chọn không được nhỏ hơn hiện tại");
                    }
                }
            }
            LocalTime currentTime = java.time.LocalTime.now();
            LocalTime arriveTime = ptime.toLocalTime();

            if (i == 5 && currentDateString.equals(arriveDateString)) {
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
                String arriveTimeString = String.valueOf(arriveTime);
                String currentTimeString = String.valueOf(currentTime);
                Date arrive = null;
                Date current = null;
                try {
                    arrive = sdf.parse(arriveTimeString);
                    current = sdf.parse(currentTimeString);
                } catch (ParseException ex) {
                    Logger.getLogger(CustomerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (i == 5 && (arrive.compareTo(current) > 0 || arrive.compareTo(current) == 0)) {
                    i++;
                } else {
                    alert("Giờ được chọn không được nhỏ hơn hiện tại");
                }
            } else {
                i++;
            }
            if (i == 6 && status != 0) {
                alert("Chỉ được chọn trạng thái là khách đã đặt");
            } else {
                i++;
            }

            if (i == 7) {
                Customer c = new Customer(0, fullname, phoneNumber, email, gender, arriveDate, ptime, status, null, null);
                //Customer customerCheck = ci.getCustomerByEmailAndStatus(email, 0);
                int cusIdLately = ci.createNewCustomer(c);
                if (cusIdLately > 0) {
                    //Customer customerCurrent = ci.getCustomerByEmailAndStatus(email, 0);
                    Customer customerCurrent = ci.getCustomerByCusId(cusIdLately);
                    OrderCoffee oc = new OrderCoffee(0, userCurrent, null, customerCurrent, 0, 0, null, null);
                    boolean createNewOrder = oci.createNewOrder(oc);
                    if (createNewOrder) {
                        OrderCoffee orderCurrent = oci.getOrderByCusId(customerCurrent.getCusId(), 0);
                        boolean checkCreateOrderDetail = false;
                        for (String s : selectedValues) {
                            String[] splitValue = s.split("-");
                            int tableId = Integer.parseInt(splitValue[1]);
                            CoffeeTable tableSelected = cti.getCoffeeTableByTableId(tableId);
                            OrderDetail od = new OrderDetail(0, orderCurrent, tableSelected, 2, null, null);
                            boolean createNewOrderDetail = odi.createNewOrderDetail(od);
                            if (createNewOrderDetail) {
                                cti.updateStatusCoffeeTable(2, tableId);
                                checkCreateOrderDetail = true;
                            } else {
                                checkCreateOrderDetail = false;
                            }
                        }
                        if (checkCreateOrderDetail) {
                            alert("Thêm mới khách hàng thành công");
                            loadDataTable();
                            loadListTable();
                            clear();
                        } else {
                            alert("Lỗi khi thêm hóa đơn chi tiết");
                        }
                    } else {
                        alert("Lỗi khi thêm mới hóa đơn");
                    }
                } else {
                    alert("Lỗi khi thêm mới khách hàng");
                }
            }
        } else {
            alert("Hãy đăng nhập");
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    public void clear() {
        fullname.setText("");
        phoneNumber.setText("");
        email.setText("");
        male.setSelected(true);
        dateArrive.setDate(null);
        comboxStatus.setSelectedIndex(0);
        loadDataTable();
        btnInsert.setEnabled(true);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
    }
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //if (userCurrent != null) {
        int index = tableView.getSelectedRow();
        if (index >= 0) {
            String oldEmail = null;
            int cusId = (int) tableView.getValueAt(index, 0);
            if (index > 0 || index == 0) {
                oldEmail = (String) tableView.getValueAt(index, 3);
            }
            String fullname = this.fullname.getText();
            String phoneNumber = this.phoneNumber.getText();
            String email = this.email.getText();
            int gender = 0;
            if (male.isSelected()) {
                gender = 1;
            }
            if (female.isSelected()) {
                gender = 0;
            }
            Date arriveDate = dateArrive.getDate();
            Date arriveHour = (Date) hourArrive.getValue();
            Time ptime = new Time(arriveHour.getTime());
            int status = comboxStatus.getSelectedIndex();
            List<String> selectedValues = listTable.getSelectedValuesList();
            int i = 0;

            if (i == 0 && index == -1) {
                alert("Chưa chọn khách hàng cần cập nhật");
            } else {
                i++;
            }

            if (i == 1 && fullname.length() == 0) {
                alert("Hãy nhập họ và tên khách hàng");
            } else {
                i++;
            }
            if (i == 2 && phoneNumber.length() == 0) {
                alert("Hãy nhập số điện thoại");
            } else {
                if (i == 2 && !phoneNumber.matches("^[0-9]+$")) {
                    alert("Số điện thoại phải là số và không chứa kí tự đặc biệt");
                } else {
                    if ((i == 2 && phoneNumber.length() > 10) || (i == 2 && phoneNumber.length() < 10)) {
                        alert("Số điện thoại phải là 10 số");
                    } else {
                        i++;
                    }
                }
            }
            if (i == 3 && email.length() == 0) {
                alert("Hãy nhập email");
            } else {
                Pattern p = Pattern.compile("^[a-z[_]](\\w*[.]?[_]?\\w*)*[@]\\w{3,}[.]\\w{3,}([.]?\\w{2,})?$");
                Matcher m;
                m = p.matcher(email);
                if (i == 3 && !m.find()) {
                    alert("Email không đúng định dạng");
                } else {
                    i++;
                }
            }
            if (i == 4 && selectedValues.isEmpty()) {
                alert("Hãy chọn bàn");
            } else {
                boolean bl = true;
                for (String s : selectedValues) {
                    if (s.charAt(0) == ' ') {
                        bl = false;
                    }
                }
                if (i == 4 && bl == true) {
                    i++;
                }
                if (i == 4 && bl == false) {
                    alert("Không được chọn khu vực khi đặt bàn");
                }
            }
            ZoneId defaultZoneId = ZoneId.systemDefault();
            LocalDate localDate = java.time.LocalDate.now();
            Date currentDate = Date.from(localDate.atStartOfDay(defaultZoneId).toInstant());
            String arriveDateString = "";
            String currentDateString = "";

            if (i == 5 && arriveDate == null) {
                alert("Hãy chọn ngày đến");
            } else {
                if (i == 5) {
                    if (arriveDate.compareTo(currentDate) > 0 || arriveDate.compareTo(currentDate) == 0) {
                        i++;
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                        arriveDateString = String.valueOf(sdf.format(arriveDate));
                        currentDateString = String.valueOf(sdf.format(currentDate));
                    } else {
                        alert("Ngày được chọn không được nhỏ hơn hiện tại");
                    }
                }
            }
            LocalTime currentTime = java.time.LocalTime.now();
            LocalTime arriveTime = ptime.toLocalTime();
            if (i == 6 && arriveDateString.equals(currentDateString)) {
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
                String arriveTimeString = String.valueOf(ptime);
                String currentTimeString = String.valueOf(currentTime);
                Date arrive = null;
                Date current = null;
                try {
                    arrive = sdf.parse(arriveTimeString);
                    current = sdf.parse(currentTimeString);
                } catch (ParseException ex) {
                    Logger.getLogger(CustomerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (i == 6 && (arrive.compareTo(current) > 0 || arrive.compareTo(current) == 0)) {
                    i++;
                } else {
                    alert("Giờ được chọn không được nhỏ hơn hiện tại");
                }
            } else {
                i++;
            }
            if (status == 2) {
                status = 3;
            }

            if (i == 7) {
                Customer c = new Customer(cusId, fullname, phoneNumber, email, gender, arriveDate, ptime, status, null, null);
                boolean updateInfoCustomer = new CustomerImplements().updateInfoCustomer(c);
                if (updateInfoCustomer) {
                    if (status != 3) {
                        OrderCoffee orderCurrent = new OrderCoffeeImplements().getOrderByCusId(c.getCusId(), 0);
                        List<OrderDetail> orderDetailsByOrderId = new OrderDetailImplements().getOrderDetailsByOrderId(orderCurrent.getOrderId());
                        for (OrderDetail orderDetail : orderDetailsByOrderId) {
                            CoffeeTable tableSelected = new CoffeeTableImplements().getCoffeeTableByTableId(orderDetail.getTableId().getTableId());
                            if (tableSelected.getStatus() == 1) {
                                new CoffeeTableImplements().updateStatusCoffeeTable(1, orderDetail.getTableId().getTableId());
                            } else {
                                new CoffeeTableImplements().updateStatusCoffeeTable(0, orderDetail.getTableId().getTableId());
                            }
                        }
                        new OrderDetailImplements().deleteOrderDetailByOrderId(orderCurrent.getOrderId());
                        boolean checkUpdateOrderDetail = false;
                        for (String s : selectedValues) {
                            String[] splitValue = s.split("-");
                            int tableId = Integer.parseInt(splitValue[1]);
                            CoffeeTable tableSelected = new CoffeeTableImplements().getCoffeeTableByTableId(tableId);
                            OrderDetail od = new OrderDetail(0, orderCurrent, tableSelected, 2, null, null);
                            boolean createNewOrderDetail = new OrderDetailImplements().createNewOrderDetail(od);
                            if (createNewOrderDetail) {
                                if (tableSelected.getStatus() == 1) {
                                    cti.updateStatusCoffeeTable(1, tableId);
                                } else {
                                    cti.updateStatusCoffeeTable(2, tableId);
                                }
                                checkUpdateOrderDetail = true;
                            } else {
                                checkUpdateOrderDetail = false;
                            }
                        }
                        if (checkUpdateOrderDetail) {
                            alert("Cập nhật khách hàng thành công");
                            loadDataTable();
                            loadListTable();
                            clear();
                        } else {
                            alert("Lỗi khi cập nhật hóa đơn chi tiết");
                        }
                    } else {
                        OrderCoffee orderCurrent = new OrderCoffeeImplements().getOrderByCusId(c.getCusId(), 0);
                        List<OrderDetail> orderDetailsByOrderId = new OrderDetailImplements().getOrderDetailsByOrderId(orderCurrent.getOrderId());
                        for (OrderDetail orderDetail : orderDetailsByOrderId) {
                            new CoffeeTableImplements().updateStatusCoffeeTable(0, orderDetail.getTableId().getTableId());
                        }
                        boolean deleteOrderDetailByOrderId = new OrderDetailImplements().deleteOrderDetailByOrderId(orderCurrent.getOrderId());
                        if (deleteOrderDetailByOrderId) {
                            boolean deleteOrderCoffee = new OrderCoffeeImplements().deleteOrderCoffee(orderCurrent.getOrderId());
                            if (deleteOrderCoffee) {
                                alert("Cập nhật khách hàng thành công");
                                loadDataTable();
                                loadListTable();
                                clear();
                            } else {
                                alert("Lỗi khi cập nhật hóa đơn");
                            }
                        } else {
                            alert("Lỗi khi cập nhật hóa đơn chi tiết");
                        }
                    }
                } else {
                    alert("Lỗi khi cập nhật thông tin khách hàng");
                }
//                for (String s : selectedValues) {
//                    String[] splitValue = s.split("-");
//                    int tableId = Integer.parseInt(splitValue[1]);
//                    CoffeeTable tableSelected = new CoffeeTableImplements().getCoffeeTableByTableId(tableId);
//                    if (tableSelected.getStatus() == 1) {
//                        cti.updateStatusCoffeeTable(1, tableId);
//                    } else {
//                        cti.updateStatusCoffeeTable(2, tableId);
//                    }
//                }
            }
        } else {
            alert("Chưa chọn khách hàng cần cập nhật");
        }
//        } else {
//            alert("Hãy đăng nhập");
//        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int index = tableView.getSelectedRow();

        if (userCurrent != null) {
            int i = 0;

            if (i == 0 && index == -1) {
                alert("Chưa chọn khách hàng cần xóa");
            } else {
                i++;
            }

            if (i == 1) {
                String email = (String) tableView.getValueAt(index, 2);
                int confirm = DialogHelpers.confirm(this, "Thao tác sẽ xóa toàn bộ đơn mà khách hàng này đã hủy. Bạn có chắc chắn muốn xóa ?");
                if (confirm == JOptionPane.YES_OPTION) {
                    boolean deleteCustomersByEmailAndStatus = new CustomerImplements().deleteCustomersByEmailAndStatus(email, 3);
                    if (deleteCustomersByEmailAndStatus) {
                        alert("Xóa thành công");
                        loadDataTable();
                        loadListTable();
                        clear();
                    } else {
                        alert("Xóa không thành công");
                    }
                }
            }
        } else {
            alert("Hãy đăng nhập");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void fullnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullnameActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
        loadListTable();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btndxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndxActionPerformed
        MainJFrame mj = new MainJFrame();
        mj.setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btndxActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maleActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void phoneNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneNumberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btndx;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JComboBox comboxStatus;
    private com.toedter.calendar.JDateChooser dateArrive;
    private javax.swing.JTextField email;
    private javax.swing.JRadioButton female;
    private javax.swing.JTextField fullname;
    private javax.swing.JSpinner hourArrive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listTable;
    private javax.swing.JRadioButton male;
    private javax.swing.JTextField phoneNumber;
    private javax.swing.JTable tableView;
    // End of variables declaration//GEN-END:variables
private void alert(String message) {
        al = new help(message);
        al.setVisible(true);
    }
}
